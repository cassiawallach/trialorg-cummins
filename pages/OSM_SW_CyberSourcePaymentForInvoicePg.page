<apex:page id="CyberSourcePaymentForInvoicePg" controller="OSM_SW_CyberSourcePaymentForInvoiceCtrl" sidebar="false" showHeader="false" standardStylesheets="false">
<script id="PaymentInvoice-Both" type="text/template">
    <div  class="ccPaymentOuterContainer">
       <div id="formdiv" class="row-fluid"> 
        <form method="POST" name="newCCForm" id="newCCForm" target="CC_Cybersource_pmt_iframe" action="{{postUrl}}">
            <input type="hidden" name="access_key" value="{{accessKey}}" />
            <input type="hidden" name="profile_id" value="{{profileId}}" /> 
            <input type="hidden" name="transaction_uuid" value="{{transactionId}}" />
            <input type="hidden" name="signed_field_names" value="{{signedFields}}" />
            <input type="hidden" name="signature" value="{{signedData}}" />
            <input type="hidden" name="unsigned_field_names" value="{{unsignedFields}}" />
            <input type="hidden" name="reference_number" value="{{referenceNumber}}" />
            <input type="hidden" name="transaction_type" value="{{transactionType}}" />
            <input type="hidden" name="locale" value="{{locale}}" />
            <input type="hidden" name="amount" value="{{amount}}" />
            <input type="hidden" name="currency" value="{{currencyCode}}" />
            <input type="hidden" name="signed_date_time" value="{{utcDate}}" />
            <input type="hidden" name="bill_to_forename" value="{{firstName}}" />
            <input type="hidden" name="bill_to_surname" value="{{lastName}}" />
            <input type="hidden" name="bill_to_phone" value="{{phone}}" />
            <input type="hidden" name="bill_to_email" value="{{email}}" />
            <input type="hidden" name="bill_to_address_line1" value="{{billingAddressFirstLine}}" />
            <input type="hidden" name="bill_to_address_city" value="{{billingAddressCity}}" />
            <input type="hidden" name="bill_to_address_country" value="{{billingAddressCountryIsoCode}}" />
            <input type="hidden" name="bill_to_address_state" value="{{billingAddressStateCode}}" />
            <input type="hidden" name="bill_to_address_postal_code" value="{{billingAddressPostalCode}}" />
            <input type="hidden" name="payment_method" value="{{paymentMethod}}" />
            <input type="hidden" name="ignore_avs" value="{{ignoreAvs}}" />
            <input type="hidden" name="override_custom_receipt_page" value="{{returnURL}}" />
            <input type="hidden" name="merchant_defined_data1" value="{{invoiceId}}" />
        </form>
      </div>
    </div>      
            
    <div class="payment_cc_information">
        <iframe id="CC_Cybersource_pmt_iframe" name="CC_Cybersource_pmt_iframe" width="108%" height="1190px" scrolling="auto" style="border:0px">
        </iframe>
    </div>
</script>
<script type="text/javascript">
    var toggleFlag=false;
   if (window.addEventListener)
    {
      window.addEventListener("message", receiveMessage, false);
     }
   else if (window.attachEvent)
    {
     window.attachEvent("onmessage", receiveMessage);
    }
  
    function receiveMessage(event)
    {
        if (event && event.data)
        {
            // This is the response from the payment gateway
            //var responseData = event.data;
            var responseData = JSON.parse(event.data);
            
            //console.log('======Response from BAMS after Callback ====='+JSON.stringify(responseData));
            
            CCRZ.subsc.cyberSourcePaymentRemoteActions.processCybersourceResponse(responseData, function(response)
            {
                if (response.success) 
                {
                    var responseDataFromOSM = response.data;
                    //console.log('====Response got from Controller is ====='+JSON.stringify(responseDataFromOSM));
                    //console.log(responseDataFromOSM);
                    //console.log(response);
                    var paymentData =
                    {
                        
                        token : responseDataFromOSM.paymentToken,
                        accountType : 'cc',
                        transactionCode : responseDataFromOSM.bankTransRef
                        
                    };
                    
                    CCRZ.setCookie('invoicePayment__msg', 'success', null);
                    CCRZ.pubSub.trigger('action:processPayment',paymentData);
                }
                else
                {
                    // handle error condition here
                        console.log('Exception: There is some error in processing the BAMS response.Please check the OSM Logs.');
                        CCRZ.cciView = new CCRZ.views.InvoicePaymentSubscView({
                                      model: CCRZ.invoicePaymentModel.toJSON(),
                                           selector: '.paymentTypeContainer.cci',
                                      el: $("#formdiv")
                                 });
                    
                                
                        var responseDataFromOSM = response.data;
                        
                        if(!_.isUndefined(responseDataFromOSM)){ 
                            
                            //var errContext = CCRZ.createPageMessage('ERROR', "storedpayment-messagingSection-Error", responseDataFromOSM.message);
                            //CCRZ.pubSub.trigger("pageMessage", errContext);
                            const divElement = document.getElementById("carddecline-error");
                            divElement.style.cssText="background-color: rgb(254, 238, 237); padding: 10px; border: 2px solid red;font-size:14px;display:block;";
                            
                            var errorDiv = "<div style='background-color: #FEEEED;'>"+
                            "<span class='icon-Warning' style='color:red; font-size:18px; vertical-align: middle;'></span>&nbsp;"+responseDataFromOSM.message+"</div>";
                            divElement.innerHTML = errorDiv;
                           
                            
                        }
                        else
                        {
                            /*var errContext = CCRZ.createPageMessage('ERROR', "storedpayment-messagingSection-Error", '{!$Label.OSM_BAMS_ERROR_MSG}');
                            CCRZ.pubSub.trigger("pageMessage", errContext);*/
                            document.getElementById("customErroDiv").style.display = "block" ;
                        }
                        
                }
            });
        }
        else
        {
            console.log('Error processing payment');
            //console.log('Error data: ' + event.data);
            // Handle error condition here
        }
    }
    jQuery(function($)
    {
        CCRZ.subsc = _.extend(CCRZ.subsc||{});
        CCRZ.subsc.cyberSourcePaymentRemoteActions = _.extend(
        {
            className : 'OSM_SW_CyberSourcePaymentForInvoiceCtrl',
            getCybersourceHostedFormData : function(callback)
            {
                this.invokeCtx('getCybersourceHostedFormData',
                function(resp, evt)
                {
                    callback(resp, evt);
                },
                {
                    buffer : false, // this call will be executed by itself
                    nmsp   : false  // defines that this is a call to a subscriber class
                }); // end invokeCtx call
            },
            processCybersourceResponse : function(jsonResponseData,callback)
            {
                this.invokeCtx('processCybersourceResponse',
                jsonResponseData,
                function(resp, evt)
                {
                    callback(resp, evt);
                },
                {
                    buffer : false, // this call will be executed by itself
                    nmsp   : false  // defines that this is a call to a subscriber class
                }); // end invokeCtx call
            }
        },CCRZ.RemoteInvocation);

        CCRZ.views.InvoicePaymentSubscView = CCRZ.CloudCrazeView.extend(
        {
            viewName : "InvoicePaymentSubscView",
            managedSubView : true,
            templateDesktop : CCRZ.util.template("PaymentInvoice-Both"),
            templatePhone : CCRZ.util.template("PaymentInvoice-Both"),
            selector: ".paymentTypeContainer.cci",
            init : function(options)
            {
                var theView =  this;
                this.selector = options.selector;
                console.log('selector' + this.selector);
                CCRZ.subsc.cyberSourcePaymentRemoteActions.getCybersourceHostedFormData(function(response)
                {
                    if (response.success)
                    {
                       
                        
                        //this code replaces the &amp; to &
                        if(!(_.isUndefined(response.data)) && !(_.isUndefined(response.data.cybersourceHostedPageData)) )
                        {
                            var returnUrl = response.data.cybersourceHostedPageData.returnURL;
                            var decodedReturnURL = $.parseHTML(returnUrl)[0].textContent; 
                            //console.log('decodedReturnURL==='+decodedReturnURL);
                            response.data.cybersourceHostedPageData.returnURL = decodedReturnURL;
                        }
                        else
                        {
                            //tbd check message
                            var errContext = CCRZ.createPageMessage('ERROR', "storedpayment-messagingSection-Error", 'There is some issue in processing request.Please try later.');
                            CCRZ.pubSub.trigger("pageMessage", errContext);
                        }
                         $.extend(theView.model, response.data.cybersourceHostedPageData);
                        
                        theView.render();
                    }
                });
            },
            renderDesktop : function()
            {
                this.setElement(this.selector);
                this.$el.html(this.templateDesktop(this.model));
                this.submitForm();
            },
            submitForm: function()
            {
                console.log('Submit form');
                $('#newCCForm').submit();
             },
            renderPhone : function()
            {
                this.setElement(this.selector);
                this.$el.html(this.templatePhone(this.model));
                this.submitForm();
            }
        });
        
        CCRZ.pubSub.on('view:InvoicePaymentView:refresh',function(view) 
       {
           console.log('===Inside Invoice Payment refresh');
        if (!CCRZ.cciView) 
        {
             console.log('===Creating Invoice Payment view===');
            CCRZ.cciView = new CCRZ.views.InvoicePaymentSubscView({
                model: CCRZ.invoicePaymentModel.toJSON(),
                selector: '.paymentTypeContainer.cci',
                el: $("#formdiv")
            });
        }
        else 
        {
            console.log('===Rerender Invoice Payment view===');
            CCRZ.cciView.render();
        }
    });
         
    });
</script>
</apex:page>