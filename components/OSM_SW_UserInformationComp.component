<apex:component controller="OSM_SW_UserInformationComp_Ctrl"  >
        
       <style>
        .tableFixHead          { overflow-y: auto; height: 250px; }
        .tableFixHead thead th { position: sticky; top: 0; background: White; }
        .requiredmark{color: red;}
       </style>
    
        <script type="text/javascript">        
            CCRZ.uiProperties.UserInfoView.desktop.tmpl = "UserInfo-Desktop-New";
        
            CCRZ.uiProperties.UserInfoView.partial.addressEntry = "#UserInfo-AddressEdit-Desktop-New";
        </script>

        <script id="UserInfo-Desktop-New" type="text/template">
       <div class="panel panel-default cc_panel cc_checkout_user_info">
       
        <div class="billingAddressForm-messagingSection-Error" style="display: none"></div>
        
        <div class="shippingAddressForm-messagingSection-Error" style="display: none"></div>
         
         
        {{#if this.ShowDISTMsg}}
            {{#if this.IsFluidWatch}} 
            {{else}}
             <div style="background-color: palegoldenrod;padding: 10px;border: solid 2px #ffae42;">    
              <span  class="icon-Info" style="color:#ffae42; font-size:13px; background-color:palegoldenrod"> </span> &nbsp; For purchase order payments , please contact your local Cummins Distributor
              
             </div>
           {{/if}} 
        {{/if}} 
        
        {{#ifEquals poType 'Bolt'}}
            {{else}}
        <!-- Added for MAR-1196  -->
         {{#if this.isOneBMSFailure}}
         {{#if this.IsFluidWatch}}
         {{else}}
             <div id="BMS-Account-Model" style="background-color: palegoldenrod;padding: 10px;border: solid 2px #ffae42;">
                 <span class="icon-Info" style="color:#ffae42; font-size:13px; background-color:palegoldenrod"></span>&nbsp;
                 {{pageLabelMap 'OSM_OneBMS_failure_Msg'}}
             </div>
         {{/if}}
     {{/if}}
     {{/ifEquals}}
     <div id="BMS-Account-Model" style="background-color: palegoldenrod;padding: 10px;border: solid 2px #ffae42; display:none;">
         <span class="icon-Info" style="color:#ffae42; font-size:13px; background-color:palegoldenrod"></span>&nbsp;
         {!$label.OSM_SW_BMSSearchValidationCreditLimit}
     </div>
     
     <!-- End: MAR-1196  -->     
     <!-- Added for MAR-519  -->
         {{#if this.paymentOptionError}}
        <div style="background-color: palegoldenrod;padding: 10px;border: solid 2px #ffae42;">
                 <span class="icon-Info" style="color:#ffae42; font-size:13px; background-color:palegoldenrod"></span>&nbsp;
                 
                                                                                       
                 
                 
                    Payment options are not available please contact you administrator.
                 
                 
             </div>
             {{/if}}
     {{#if this.OneBMSCreditLimitMsg}}
       {{#if this.IsFluidWatch}} 
            {{else}}
             <div style="background-color: palegoldenrod;padding: 10px;border: solid 2px #ffae42;">
                 <span class="icon-Info" style="color:#ffae42; font-size:13px; background-color:palegoldenrod"></span>&nbsp;
                 {{#if this.paymentOptionError}}
                    Payment options are not available please contact you administrator.
                 {{else}}
            <!--Start @Suresh LL-30 Commented below code as it is replaced by one custom label and message is same for both distributor and customer 03/Aug/2022-->
                  <!--   {{#if this.thirdPartyPayment}}
                         This account is ineligible for purchase order payment as there is insufficient credit and/or payment type is not charge. Please pay via card in order to proceed with payment.
                     {{else}}
                         This purchase is only eligible for card payment. For purchase order payments, please contact your local distributor.
                     {{/if}}-->
            		 
            {{pageLabelMap 'OSM_OneBMS_Validation_Error_Message'}}
            <!--End @Suresh LL-30-->
                 {{/if}}
             </div>
         {{/if}} 
         {{/if}}
         
     {{#if this.BoltNotActiveMsg}}
      {{#if this.IsFluidWatch}} 
            {{else}}
             <div style="background-color: palegoldenrod;padding: 10px;border: solid 2px #ffae42";>
                 <span class="icon-Info" style="color:#ffae42; font-size:13px; background-color:palegoldenrod"></span>&nbsp;
                 {{#if this.paymentOptionError}}
                    Payment options are not available please contact you administrator.
                 {{else}}
                     {{#if this.thirdPartyPayment}}
                         This account is ineligible for purchase order payment as there is insufficient credit and/or payment type is not charge. Please pay via card in order to proceed with payment.
                     {{else}}
                         This purchase is only eligible for card payment. For purchase order payments, please contact your local distributor.
                     {{/if}}   
                {{/if}}              
             </div>
         {{/if}}
     {{/if}}
     <div style="background-color: #FEEEED;padding: 10px;border: solid 2px red;display:none;" id="ThirdPartyMsg">
            <span class="icon-Warning" style="color:red; font-size:18px; vertical-align: middle;"></span>&nbsp;
                Please enter a valid  IAM number for the 3rd party Billing entity in order to proceed.
    </div>
     
    <!-- change for MAR-1151  -->
        <div id="checkboxDiv_ErrorMsg" style="background-color: #FEEEED;padding: 10px;border: solid 2px red;display:none;">
            <span class="icon-Warning" style="color:red; font-size:18px; vertical-align: middle;"></span>&nbsp;
            {!$label.OSM_UserInfo_PaymentType}
        </div>
        
        <div id="checkboxDiv_ErrorMsg2" style="background-color: #FEEEED;padding: 10px;border: solid 2px red;display:none;">
            <span class="icon-Warning" style="color:red; font-size:18px; vertical-align: middle;"></span>&nbsp;
            {!$label.OSM_SW_BMSSearchValidation}
        </div>
    <!-- changes end for MAR-1151  -->
     
     <!-- End MAR-519  -->
        <div class="panel-heading cc_heading">
         <h3 class="panel-title cc_title">{{pageLabelMap 'CheckOut_ContactInformation'}}</h3>
        </div>
        <div class="panel-body cc_body" style="padding-top:1%">
        <p class="cc_user_information_helptext" style="width: 92px;float:right;margin-bottom: 0px;">{{{pageLabelMap 'Required_Fields'}}}</p>
         <form id="mainform" class="cc_userInfo_form">
          <div class="main-messagingSection-Error" style="display: none"></div>
          <div class="form-group">
           <label for="firstNameField" class="cc_contact_input_firstname_label">{{pageLabelMap 'CheckOut_FirstName'}}<span style="color:red">&nbsp;*</span></label>
           <input id="firstNameField" style="width:70%" type="text" class="form-control contactInput cc_contact_input_firstname" name="buyerFirstName" maxlength=40 value="{{this.contactDetails.FirstName}}" />
          </div>
          <div class="form-group" style="width:40%">
           <label for="lastNameField" class="cc_contact_input_lastname_label">{{pageLabelMap 'CheckOut_LastName'}}<span style="color:red">&nbsp;*</span></label>
           <input id="lastNameField" style="width:70%" type="text" class="form-control contactInput cc_contact_input_lastname" name="buyerLastName" maxlength=40 value="{{this.contactDetails.LastName}}" />
          </div>
          <div class="form-group">
           <label for="homePhoneField" class="cc_contact_input_phone_label">{{pageLabelMap 'CheckOut_PrimaryPhone'}}</label>
           <input id="homePhoneField" style="width:30%" type="text" class="form-control contactInput cc_contact_input_phone" name="buyerPhone" maxlength=40 value="{{this.contactDetails.Phone}}" />
          </div>
          <div class="form-group">
           <label for="emailField" class="cc_contact_input_email_label">{{pageLabelMap 'CheckOut_Email'}}<span style="color:red">&nbsp;*</span></label>
           <input id="emailField" style="width:70%" type="email" class="form-control contactInput cc_contact_input_email" name="buyerEmail" maxlength=80 value="{{this.contactDetails.Email}}" />
          </div>
        <div class="form-group">
          <label for="secEmailField" class="cc_contact_input_email_label">{{pageLabelMap 'CheckOut_SecondaryEmail'}}</label>
          <input id="secEmailField" style="width:70%" type="email" class="form-control contactInput cc_contact_input_email" name="buyerSecEmail" maxlength=80 />
         </div>
         {{#if this.thirdPartyPayment}}
        {{#if this.IsFluidWatch}} 
              {{else}} 
            <div class="row" id="thirdPartyPayment" style="width:100%; padding-bottom: 5px; padding-left:0px;display: flex;padding-top: 3%;">
                <span style="padding-left: 25px;display: flex;">
                    {{#if this.thirdPartyPaymentChcked}}
                        <input type="checkbox" class="thirpatyPaymentchwckbox" checked  >  <span style="  font-size: 16px;font-weight: bold; padding-left: 10px;width:15%;"> {{pageLabelMap 'Third_Party_Billing'}}</span></input>
                    {{else}}
                        <input type="checkbox" class="thirpatyPaymentchwckbox"  > <span style="  font-size: 16px;font-weight: bold; padding-left: 10px;">  {{pageLabelMap 'Third_Party_Billing'}}</span></input>
                    {{/if}}
                    <div id="checkboxDiv2"> 
                        {{#if this.thirdPartyPaymentChcked}}
                        <div style="display:flex;margin-left: 70px;" id="toShowBMSLookup">
                           <div class="row">
                                  <div class="col-lg-4 col-md-12" >
                                          <label for="BMSAccountdistcode" style="" >Distributor Code</label><span class="requiredmark">*</span>
                                          <div class="distributorcodeselectid"/>
                                   </div>
                                  <div class="col-lg-4 col-md-12">
                                         <label for="BMSAccountSearchText" style="" >Account Name</label><span class="requiredmark">*</span>
                                         <input id="BMSAccountSearchText" type="text" class="form-control " width="200px" name="" maxlength=255 value="{{this.searchBMSString}}" />
                                  </div>
                                  <div class="col-lg-4 col-md-12" >
                                          <label for="BMSAccountIAMCustomerCode" style="" >IAM Customer Code</label><span class="requiredmark">*</span>
                                           <input id="BMSAccountIAMCustomerCode" type="text" class="form-control " width="200px" name="" maxlength=255  />
                                  </div>
                                  <div class="col-lg-4 col-md-12">
                                         <button class="btn btn-default btn-sm  getBMSInfoSearch CMI-btn-teal" type="button" style="margin-left:420px;margin-top:25px;" value="{{pageLabelMap 'Search BMS Number'}}">{{pageLabelMap 'Search BMS Number'}}</button>
                                  </div>
                            </div>
                        </div>
                    {{/if}}
                   
                    </div>
                </span>
            </div>                
        {{/if}}
        {{/if}} 
        {{#if this.displayPaymentMethods}}
        <div class="col-md-12" id="paymentParentDiv" style="width:100%; padding-bottom: 5px; padding-left:0px">
               <span>
               <h3  class="col-md-2 cc_section_title" style="padding-left:0px">{!$label.OSM_UserInfo_Payment_Type}</h3>
          
            <div id="checkboxDiv"> 
            
          
              {{#ifContains this.displayPaymentMethods 'po'}}
                   {{#if this.IsFluidWatch}} 
                   {{else}}                    
                    <label id="idofPOCheckBox" style="margin-top: 27px;">
                      <input  type="radio"  class="cmi-po" data-paymenttype='PO' name="radio" >
                      <span >Purchase Order</span>
                      </input>
                    </label>
                    
                    {{/if}} 
                 {{/ifContains}}   
                
                {{#ifContains this.displayPaymentMethods 'cc'}}
                 
                    <label id="idofCCCheckBox"   style="margin-top: 27px; padding-left:15px">
                      <input  type="radio"  data-paymenttype='CC' class="cmi-cc" name="radio"  >
                      <span >{!$label.OSM_UserInfo_Payment}</span>
                      </input>
                    </label>

                {{/ifContains}}
           
            {{/if}}
            </div>

        </span>
         
         </div> 
    <!--
        <div class="col-md-12" style="padding-left:0px;">
              
             {{#if this.OneBMSCreditLimitMsg}}
              {{#if this.IsFluidWatch}} 
                   {{else}}
                    <span  style="padding-left:0px; display:block; color:red">{{pageLabelMap 'OSM_OneBMS_LimitMsg'}}</span>
                {{/if}} 
                {{/if}}
                
            {{#if this.BoltNotActiveMsg}}
             {{#if this.IsFluidWatch}} 
                   {{else}}
                    <span  style="padding-left:0px; display:block; color:red">{{pageLabelMap 'Purchase Order not available at this time.'}}</span>
                {{/if}}
            {{/if}}

            
            
        </div>
    -->
         </form>
        
         <div id="billingAddressId" class="cc_address_entry_billing">
          {{> addressEntry this.billingAddress}}
         </div>
         <div class="cc_address_entry_shipping">
          {{> addressEntry this.shippingAddress}}
         </div>
        {{#ifDisplay 'Dspl.CCEmail'}}
          <form id="ccEmailForm" class="cc_ccemail_new">
           <div class="ccemail-messagingSection-Error" style="display: none"></div>
           <h3 class="cc_ccemail_title">{{pageLabelMap 'CheckOut_ccEmailAddress'}}</h3>
           <p class="cc_ccemail_helptext">{{{pageLabelMap 'CheckOut_ccEmailAddressHelpText'}}}</p>
           <div class="form-group">
            <label for="ccEmailAddress" class="cc_contact_input_cc_email_label">{{pageLabelMap 'CheckOut_ccEmailAddress'}}</label>
            <input id="ccEmailAddress" type="text" class="form-control contactInput ccemail cc_contact_input_cc_email" name="ccEmailAddresses" maxlength=80 value="{{this.ccEmailAddresses}}" />
           </div>
          </form>
         {{/ifDisplay}}

         <form class="userInformation cc_user_information">
          <!--<p class="cc_user_information_helptext">{{{pageLabelMap 'Required_Fields'}}}</p>-->
          <p class="link_button cc_link_button">
           <input class="btn btn-default btn-sm processBack cc_process_back CMI-btn-blue" type="button" value="{{pageLabelMap 'Back'}}" alt="{{pageLabelMap 'Back'}}" />
          
           {{#if this.thirdPartyPaymentChcked }}
            
           <!--
           <input class="btn btn-default btn-sm  cc_process_user_info osm_processUserInfo  CMI-btn-teal" type="button" value="{{pageLabelMap 'CheckOut_Continue'}}"  alt="{{pageLabelMap 'CheckOut_Continue'}}" /> -->
           
           <input class="btn btn-default btn-sm  cc_process_user_info osm_processEDQModelPO  CMI-btn-teal" type="button" style="margin-left:10px" value="{{pageLabelMap 'CheckOut_Continue'}}"  alt="{{pageLabelMap 'CheckOut_Continue'}}" />
           {{else}}
                {{#ifContains this.selectedPaymentMethod 'cc'}}
               <input class="btn btn-default btn-sm  cc_process_user_info osm_processEDQModel  CMI-btn-teal" type="button" style="margin-left:10px" value="{{pageLabelMap 'CheckOut_Continue'}}"  alt="{{pageLabelMap 'CheckOut_Continue'}}" />
               {{/ifContains}}
               {{#ifContains this.selectedPaymentMethod 'po'}}
               <!--
               <input class="btn btn-default btn-sm  cc_process_user_info osm_processUserInfo  CMI-btn-teal" type="button" value="{{pageLabelMap 'CheckOut_Continue'}}"  alt="{{pageLabelMap 'CheckOut_Continue'}}" /> -->
               
               <input class="btn btn-default btn-sm  cc_process_user_info osm_processEDQModelPO  CMI-btn-teal" type="button" style="margin-left:10px" value="{{pageLabelMap 'CheckOut_Continue'}}"  alt="{{pageLabelMap 'CheckOut_Continue'}}" />
               {{/ifContains}}
          
           {{/if}}
           
          </p>
         </form>
        </div>
       </div>
        <div id="EDQModel" class="modal fade cc_address_book_modal" role="dialog">
         <div class="modal-dialog cc_modal-dialg" role="document">
          <div class="modal-content cc_modal-content">
            <div class="modal-header cc_modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&#215;</span></button>
              <h4 class="modal-title cc_title">{{pageLabelMap 'UserInfo_AddressBookModal'}}</h4>
            </div>
            <div class="modal-body cc_modal-body">
                 <div class="row cc_billing_shipping_info">
                 
                 <div class="col-md-6 cc_personal_info">
                 <label><input type="radio" checked="checked" name="radio1" class="osm_SaveBillingAddBackToOld">
                   <B>{!$label.OSM_UserInfo_BillingAddress}</B>
                   <output id="BillingAddr1"></output>
                   <output id="BillingAddr2"></output>
                   <output id="BillingAddr3"></output>
                   <output id="BillingCity"></output>
                   <output id="BillingState"></output>
                   <output id="BillingCountry"></output>
                    <output id="BillingPostalCode"></output>
                  
                   </label>
                   
                 </div>
                 <div class="col-md-6 cc_personal_info">
                  <label><input type="radio"  name="radio1" class="osm_SaveCleansedAdd" >
                   <B>{!$label.OSM_UserInfo_Address}</B>
                   <output id="EDQBillingAddr1"></output>
                   <output id="EDQBillingAddr2"></output>
                   <output id="EDQBillingAddr3"></output>
                   <output id="EDQBillingCity"></output>
                   <output id="EDQBillingState"></output>
                   <output id="EDQBillingCountry"></output>
                   <output id="EDQBillingPostalCode"></output>
                   <output id="ErrorBilling"></output>
                  </label> 
                  
                 </div>
                </div>
                <hr>
                <div class="row cc_billing_shipping_info">
                 
                 <div class="col-md-6 cc_personal_info">
                   <label><input type="radio" checked="checked" name="radio3" class="osm_SaveShippingAddBackToOld"></input>
                   <B>{!$label.OSM_UserInfo_AddressSelected}</B>
                   <output id="ShippingAddr1"></output>
                   <output id="ShippingAddr2"></output>
                   <output id="ShippingAddr3"></output>
                   <output id="ShippingCity"></output>
                   <output id="ShippingState"></output> 
                   <output id="ShippingCountry"></output>
                   <output id="ShippingPostalCode"></output>
                   
                   </label>
                 </div>
                 <div class="col-md-6 cc_personal_info">
                   <label><input type="radio"  name="radio3"class="osm_SaveCleansedAddShip">
                   <B>{!$label.OSM_UserInfo_Address}</B>
                   <output id="EDQShippingAddr1"></output>
                   <output id="EDQShippingAddr2"></output>
                   <output id="EDQShippingAddr3"></output>
                   <output id="EDQShippingCity"></output>
                   <output id="EDQShippingState"></output>
                   <output id="EDQShippingCountry"></output>
                   <output id="EDQShippingPostalCode"></output>
                   <output id="ErrorShipping"></output>
                   </label>
                 </div>
                 
                </div>
                <hr>
                <div class="row" style="text-align:right;padding-right:20px;">
                    <input class="btn btn-default osm_processUserInfo cc_process_user_info btn-sm  CMI-btn-teal" data-dismiss="modal" type="button"  style="padding-right:20px;" value="Proceed"  />
                </div>
                  
                
          </div>
          </div>
          
         </div>
       
       </div>
       
       
       <div id="EDQModelPO" class="modal fade cc_address_book_modal" role="dialog">
         <div class="modal-dialog cc_modal-dialg" role="document">
          <div class="modal-content cc_modal-content">
            <div class="modal-header cc_modal-header">
              <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&#215;</span></button>
              <h4 class="modal-title cc_title">{{pageLabelMap 'UserInfo_AddressBookModal'}}</h4>
            </div>
            <div class="modal-body cc_modal-body">
                
                <div class="row cc_billing_shipping_info">
                 
                 <div class="col-md-6 cc_personal_info">
                   <label><input type="radio" checked="checked" name="radio2" class="osm_SaveShippingAddBackToOldPO"></input>
                   <B>{!$label.OSM_UserInfo_AddressSelected}</B>
                   <output id="ShippingAddr1PO"></output>
                   <output id="ShippingAddr2PO"></output>
                   <output id="ShippingAddr3PO"></output>
                   <output id="ShippingCityPO"></output>
                   <output id="ShippingStatePO" ></output> 
                   <output id="ShippingStateCodePO" style="display: none;"></output> 
                   <output id="ShippingCountryPO"></output>
                   <output id="ShippingPostalCodePO"></output>
                   
                   </label>
                 </div>
                 <div class="col-md-6 cc_personal_info">
                   <label><input type="radio"  name="radio2"class="osm_SaveCleansedAddShipPO">
                   <B>{!$label.OSM_UserInfo_Address}</B>
                   <output id="EDQShippingAddr1PO"></output>
                   <output id="EDQShippingAddr2PO"></output>
                   <output id="EDQShippingAddr3PO"></output>
                   <output id="EDQShippingCityPO"></output>
                   <output id="EDQShippingStatePO"></output>
                   <output id="EDQShippingCountryPO"></output>
                   <output id="EDQShippingPostalCodePO"></output>
                   <output id="ErrorShippingpo"></output>
                   </label>
                 </div>
                 
                </div>
                <hr>
                <div class="row" style="text-align:right;padding-right:20px;">
                    <input class="btn btn-default osm_processUserInfo cc_process_user_info btn-sm  CMI-btn-teal" data-dismiss="modal" type="button"  style="padding-right:20px;" value="Proceed"  />
                </div>
                  
                
          </div>
          </div>
          
         </div>
       
       </div>
       
      </script>

            <script id="UserInfo-AddressEdit-Desktop-New" type="text/template">
       <form id="{{classPrefix}}AddressForm" class="addressForm">
        <div class="{{classPrefix}}-messagingSection-Error" style="display: none"></div>
        <h3 class="cc_section_title">{{pageLabelMap sectionLabel}}</h3>

        <!-- {{#ifEquals classPrefix 'shipping'}} -->
            
         <!--<a class="cmi_copy_address" style="margin-right:40px;cursor:pointer;">{{pageLabelMap 'Checkout_UseBillingAddress'}}</a>-->
         
         <!-- <span style="padding-right: 25px;">
            <input type="checkbox" class="cmi_copy_address2"  >   {{pageLabelMap 'Checkout_UseBillingAddress'}}</input>
         </span>
        {{/ifEquals}}
        
        <span class="change_address cc_change_address" id="shippingAddressSelector">
         <a href="#modal_{{classPrefix}}" data-toggle="modal" class="cc_change_address_modal">{{pageLabelMap 'UserInfo_AddressBook'}}</a>
         <span class=""><i>
          {{pageLabelMap 'UserInfo_AddressBookNote'}}
          </i>
          </span>
        </span> -->
        <div style="height:6vh;">
            <div style="display: inline;">
                {{#ifEquals classPrefix 'shipping'}}
                    
                <!--<a class="cmi_copy_address" style="margin-right:40px;cursor:pointer;">{{pageLabelMap 'Checkout_UseBillingAddress'}}</a>-->
                
                <span style="padding-right: 25px;" class="col-sm-4">
                    <input type="checkbox" class="cmi_copy_address2"  >   {{pageLabelMap 'Checkout_UseBillingAddress'}}</input>
                </span>
                {{/ifEquals}}
                
                <span class="change_address cc_change_address" id="shippingAddressSelector">
                    <a href="#modal_{{classPrefix}}" data-toggle="modal" class="cc_change_address_modal">
                        <div style="display: inline;">
                            <span style="color: black;"><span style="font-family: arial,sans-serif;"><span style="font-size: 9.0pt;color: teal;">{{pageLabelMap 'UserInfo_AddressBook'}}</span></span></span>
                        </div>
                    </a>
                </span>

            
            </div>
            <div class="">
                <i>{{pageLabelMap 'UserInfo_AddressBookNote'}}</i>
            </div>
        </div>
        
        <input type="hidden" class="{{classPrefix}}acctIdField {{classPrefix}}Field" name="{{classPrefix}}Address.partnerId" maxlength=100 value="{{this.partnerId}}" />
        <div class="form-group" >
         <label for="address1">{{pageLabelMap 'Profile_Address'}}<span style="color:red">&nbsp;*</span></label>
         <input id="address1" type="text" class="form-control {{classPrefix}}Address1 {{classPrefix}}Field cc_contact_input_address" name="{{classPrefix}}Address.address1" value="{{this.address1}}" maxlength="40" />
         <input id="address2" type="text" style="width:70%" class="form-control {{classPrefix}}Address2 {{classPrefix}}Field cc_contact_input_address" name="{{classPrefix}}Address.address2" value="{{this.address2}}" maxlength="40" />
         <input id="address3" type="text" style="width:70%" class="form-control {{classPrefix}}Address3 {{classPrefix}}Field cc_contact_input_address" name="{{classPrefix}}Address.address3" value="{{this.address3}}" maxlength="40" />
        </div>
        <div class="form-group">
         <label for="country">{{pageLabelMap 'CheckOut_Country'}}<span style="color:red">&nbsp;*</span></label>
         {{{selectGeo 'country' this.countryList this.countryCode 'countryListing form-control' this.classPrefix}}}
        </div>
       
       <div class="form-group">
         <label for="state" >{{pageLabelMap 'CheckOut_State'}}<span style="color:red;display:inherit;" id="{{classPrefix}}statelabel">&nbsp;*</span></label>
         <div id="billingStateId" class="stateSection cc_state_section">
            <span class="cc_select_geo"><select name="" class="wide form-control billingField billingstate valid" aria-invalid="false"><option value="AL">Alabama</option><option value="AK">Alaska</option><option value="AZ">Arizona</option><option value="AR">Arkansas</option><option value="CA">California</option><option value="CO">Colorado</option><option value="CT">Connecticut</option><option value="DE">Delaware</option><option value="DC">District of Columbia</option><option value="FL">Florida</option><option value="GA">Georgia</option><option value="HI">Hawaii</option><option value="ID">Idaho</option><option value="IL">Illinois</option><option value="IN">Indiana</option><option value="IA">Iowa</option><option value="KS">Kansas</option><option value="KY">Kentucky</option><option value="LA">Louisiana</option><option value="ME">Maine</option><option value="MD">Maryland</option><option value="MA">Massachusetts</option><option value="MI">Michigan</option><option value="MN">Minnesota</option><option value="MS">Mississippi</option><option value="MO">Missouri</option><option value="MT">Montana</option><option value="NE">Nebraska</option><option value="NV">Nevada</option><option value="NH">New Hampshire</option><option value="NJ">New Jersey</option><option value="NM">New Mexico</option><option value="NY">New York</option><option value="NC">North Carolina</option><option value="ND">North Dakota</option><option value="OH">Ohio</option><option value="OK">Oklahoma</option><option value="OR">Oregon</option><option value="PA">Pennsylvania</option><option value="RI">Rhode Island</option><option value="SC">South Carolina</option><option value="SD">South Dakota</option><option value="TN">Tennessee</option><option value="TX">Texas</option><option value="UT">Utah</option><option value="VT">Vermont</option><option value="VA">Virginia</option><option value="WA">Washington</option><option value="WV">West Virginia</option><option value="WI" selected="">Wisconsin</option><option value="WY">Wyoming</option></select></span>
         </div>
        </div>
                   
                   
                   
        <div class="form-group">
         <label for="city">{{pageLabelMap 'CheckOut_City'}}<span style="color:red">&nbsp;*</span></label>
         <input id="city" type="text" class="form-control {{classPrefix}}City {{classPrefix}}Field cc_contact_input_city" name="{{classPrefix}}Address.city" maxlength=255 value="{{this.city}}" />
        </div>
        <div class="form-group">
         <label for="postalCode">{{pageLabelMap 'CheckOut_PostalCode'}}<span style="color:red">&nbsp;*</span></label>
         <input id="postalCode" type="text" class="form-control {{classPrefix}}PostalCode {{classPrefix}}Field cc_contact_input_postal_code" name="{{classPrefix}}Address.postalCode" value="{{this.postalCode}}" maxlength=10/>
        </div>
       </form>
       
       
       <div id="modal_{{classPrefix}}" class="modal fade cc_address_book_modal" tabindex="-1" role="dialog">
        <div class="modal-dialog cc_modal-dialg" role="document">
         <div class="modal-content cc_modal-content">
          <div class="modal-header cc_modal-header">
           <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&#215;</span></button>
           <h4 class="modal-title cc_title">{{pageLabelMap 'UserInfo_AddressBookModal'}}</h4>
          </div>
          <div class="modal-body cc_modal-body">
           {{#each this.addressList}}
            <div class="row cc_billing_shipping_info">
             <div class="col-md-6 cc_personal_info">
              {{> addressDisplay}}
             </div>
             <div class="col-md-6 cc_select">
              <input type="button" value="{{pageLabelMap 'UserInfo_selectAddress'}}" class="btn btn-default btn-sm {{../classPrefix}}Field  cc_select_address osm_selectAddress" data-id="{{this.sfid}}"/>
             </div>
            </div>
           <hr>
           {{/each}}
          </div>
         </div>
        </div>
       </div>
       
             <!-- pop up for payment method - START -->
                    <div id="paymentMethodpopup" class="modal fade cc_modal cc_cart_rfq_modal" role="dialog">
            <div class="modal-dialog" style="margin-left: 32%;margin-top: 15%" role="document">
                <div class="modal-content cc_modal_content" style="width: 60rem;border-radius:1px;border:1px black;">
                    <div class="modal-header" style="color: #fff;background-color: black;border-color: black;">                   
                        <h4 class="modal-title cc_modal_title" id="CartRfqLabel">{{pageLabelMap 'Cummins Southern Plains LLC'}}</h4>
                    </div>
                     <br>   
         &nbsp &nbsp {!$label.OSM_SW_SouthernPlainCustError}
                    <div class="messagingSection-FreeTrial-Error messagingSection-Error" style="display: none">
                        <div class="alert alert-danger" id="ErrorMsgDenger"></div>
                    </div>                    
                    <div class="modal-footer">
                        <input type="button" class="closeModal btn btn-default cc_add_coupon" style="background-color: #0f4f77;" id="hideModelBMS" data-dismiss="modal" value="OK" />
                    </div>
                </div>
            </div>
        </div>
             <!-- pop up for payment method - END -->
       
       <!-- pop up for BMS lookup -->
       
       
        <div id="BMS-Search-Model" class="modal fade cc_modal cc_cart_rfq_modal" role="dialog">
            <div class="modal-dialog" style="margin-left: 32%;" role="document">
                <div class="modal-content cc_modal_content" style="width: 60rem;border-radius:1px;border:1px black;">

                    <div class="modal-header CMI-DA-Packages cc_modal_header bgc" style="background-color: black !important;">
                        <!-- <button type="button" class="close cc_close" data-dismiss="modal" aria-label="Close" style="color: white;opacity:1;">
                            <span aria-hidden="true">&#215;</span>
                        </button> -->
                        <h4 class="modal-title cc_modal_title" id="CartRfqLabel">{{pageLabelMap 'BMS Search Result'}}</h4>
                    </div>

                <!-- <div class="modal-body cc_modal_body">-->
                    <div class="messagingSection-FreeTrial-Error messagingSection-Error" style="display: none">
                        <div class="alert alert-danger" id="ErrorMsgDenger"></div>
                    </div>
                    <div role="tabpanel" class="tab-pane" id="contactTab">
                        <div class="table-responsive tableFixHead" id="tableContacts" >
                            <table class="table table-hover cc_table" >
                                <thead class="cc_thead">
                                    <tr class="cc_tr">
                                        <th class="cc_th_name">Option</th>
                                        <th class="cc_th_name">Customer Code</th>
                                        <th class="cc_th_picked">Customer Name</th>
                                        <th class="cc_th_picked">Customer City</th>
                                        <th class="cc_th_picked">Customer State</th>
                                    </tr>
                                </thead>
                                <tbody class="cc_tbody" id="BMSSearchResultTableBody">
                                    <!-- {{#each this.contactList}} 
                                    <tr>
                                        <td class="cc_td_name">{{Name}}</td>
                                        <td class="cc_td_account_number">{{accountNumber}}</td> 
                                        <td class="cc_td_address">{{pageLabelMap 'ADDRESS_FORMAT' MailingAddress.address1 MailingAddress.city MailingAddress.state MailingAddress.postalCode MailingAddress.countryCode}}</td>
                                        <td><a href="#"><i class="pickSel cc_pick_account fa fa-chevron-right pickContact" data-id="{{Id}}" aria-hidden="true"></i><span class="sr-only">Select Contacts</span></a></td>
                                    </tr>
                                    {{/each}} -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input type="button" class="closeModal btn btn-default cc_add_coupon" style="background-color: #0f4f77;" id="hideModelBMS" data-dismiss="modal" value="Close" />
                        <button type="button" class="btn CMI-DA-Packages selectAndCloseSearchBMSPopUp" style="float:left;">{{pageLabelMap 'Select and continue'}}</button>                        
                    </div>
                </div>
            </div>
        </div>
        
        <!--MAR-1196
        <div id="BMS-Account-Model" class="modal fade cc_modal cc_cart_rfq_modal" role="dialog">
            <div class="modal-dialog" style="margin-left: 32%;" role="document">
                <div class="modal-content cc_modal_content" style="width: 60rem;">

                    <div class="modal-header CMI-DA-Packages cc_modal_header bgc">
                        <button type="button" class="close cc_close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&#215;</span>
                        </button>
                        <h4 class="modal-title cc_modal_title" id="CartRfqLabel">{{pageLabelMap 'BMS Account Information'}}</h4>
                    </div>
                        
                        {!$label.OSM_SW_BMSSearchValidationCreditLimit}
               
                    <div class="messagingSection-FreeTrial-Error messagingSection-Error" style="display: none">
                        <div class="alert alert-danger" id="ErrorMsgDenger"></div>
                    </div>
                    
                    <div class="modal-footer">
                       
                        <button type="button" class="btn CMI-DA-Packages closepopupForCreditLimitCheck"  >{{pageLabelMap 'Close'}}</button>
                    </div>
                </div>
            </div>
        </div>
    -->
        <div id="BMS-Search-Issue" class="modal fade cc_modal cc_cart_rfq_modal" role="dialog">
            <div class="modal-dialog" style="margin-left: 32%;" role="document">
                <div class="modal-content cc_modal_content" style="width: 60rem;border-radius:1px;border:1px black;">
                    <div class="modal-header" style="color: #fff;background-color: black;border-color: black;">                   
                        <h4 class="modal-title cc_modal_title" id="CartRfqLabel">{{pageLabelMap 'BMS Account Information'}}</h4>
                    </div>
                        {!$label.OSM_SW_BMSSearchValidationCharacterLimit}
                    <div class="messagingSection-FreeTrial-Error messagingSection-Error" style="display: none">
                        <div class="alert alert-danger" id="ErrorMsgDenger"></div>
                    </div>                    
                    <div class="modal-footer">
                        <input type="button" class="closeModal btn btn-default cc_add_coupon" style="background-color: #0f4f77;" id="hideModelBMS" data-dismiss="modal" value="Close" />
                    </div>
                </div>
            </div>
        </div>
        
        <div id="BMS-Search-NoResult" class="modal fade cc_modal cc_cart_rfq_modal" role="dialog">
            <div class="modal-dialog" style="margin-left: 32%;" role="document">
                <div class="modal-content cc_modal_content" style="width: 60rem;border-radius:1px;border:1px black;">                    
                   <div class="modal-header" style="color: #fff;background-color: black;border-color: black;">
                        <h4 class="modal-title cc_modal_title" id="CartRfqLabel">{{pageLabelMap 'BMS Account Information'}}</h4>
                    </div>
                        Please enter the correct customer name. Entered customer name is not available in the BMS system.
                    <div class="messagingSection-FreeTrial-Error messagingSection-Error" style="display: none">
                        <div class="alert alert-danger" id="ErrorMsgDenger"></div>
                    </div>                    
                    <div class="modal-footer">                        
                        <input type="button" class="closeModal btn btn-default cc_add_coupon" style="background-color: #0f4f77;" data-dismiss="modal" value="Close" />
                    </div>
                </div>
            </div>
        </div>
       
      </script>
    
     
      
      <script>

        var cartCheckoutViewHere;
        var isPaymentMethodcalledFromRemote = false;
        var setUpFirstTime = true;
        var masterShippingAddress = new Array();
        var BillingAddress = new Array();
        var addressView;
        var responseFromCtrl;
        var poType;
        var selectedBMSId = '';
        var creditMsj = false;
        var isFWPrd = false;
        var isUpdateCartPayRequired;false;
       var HQDistributorCode;
       var isbillingaddrcleansed=false;
       var isshippingaddrcleansed=false;
        
        jQuery(function($)
        {
            
                    
                
            CCRZ.pubSub.once('view:AddressListing:refresh', function(addListView){
                console.log('===view:AddressListing:refresh for Overriding the validations');
                console.log('AddressListing:Step1');
                populatedistributorcode();
                Object.getPrototypeOf(addListView).defaultValidateInfo = Object.getPrototypeOf(addListView).validateInfo;

                  _.extend(Object.getPrototypeOf(addListView), 
                 {
                 
                    validateInfo: function (event) 
                    {
                        console.log('====Inside validateInfo===');
                        
                        var isValid=true;
                        var addresses=['billingAddress','shippingAddress'];
                        
                        var displayOptions = cartCheckoutViewHere.model.attributes.displayPaymentMethods;
                        console.log('====displayOptions=='+displayOptions);
                        console.log('====checkbox val=='+$('.cmi-po').is(':checked'));
                        console.log('====checkbox val=='+$('.cmi-cc').is(':checked'));
                        
                          
                        var displayPaymentError=true;
                        var tmpdisplayPaymentError=false;
                        if(displayOptions != undefined)
                        {
                            if( displayOptions=='cc' && $('.cmi-cc').is(':checked')==false){
                                tmpdisplayPaymentError=true;
                            }
                            else if(displayOptions=='po' && $('.cmi-cc').is(':checked')==false){
                            tmpdisplayPaymentError=true;
                            }
                            else if (displayOptions.includes('cc') && displayOptions.includes('po')){
                            console.log('=====Final Step===');
                            tmpdisplayPaymentError=true;
                            }
                        }else
                        {
                            tmpdisplayPaymentError=true;
                        }
                        
                        if(!tmpdisplayPaymentError){
                         displayPaymentError=false;
                        }
                      
                        //for later
                        console.log('displayPaymentError=='+displayPaymentError);
                        if(!cartCheckoutViewHere.model.attributes.selectedPaymentMethod)
                        {
                            
                            isValid=false;
                            //$('#checkboxDiv').css('border-color', 'red');
                            $('#checkboxDiv').css('border-color', 'red');
                            $('#checkboxDiv').css('border-style', 'solid');
                            
                            // START - Juhi Changes : Sept 06 - CSS when payment type is not selected
                             $('#checkboxDiv').css('width', '50%');
                            $('#checkboxDiv').css('margin-left', '-10px');
                            $('#checkboxDiv_ErrorMsg').show();
                            // END - Juhi Changes : Sept 06 - CSS when payment type is not selected
                        }
                        else{
                          
                            $('#checkboxDiv').css('border-color', '');
                            $('#checkboxDiv').css('border-style', '');
                        }
                        // debugger;
                        if(cartCheckoutViewHere.model.attributes.thirdPartyPaymentChcked)
                        {
                            if(!cartCheckoutViewHere.model.attributes.selectedBMSResult)
                            {
                                isValid=false;
                                //$('#checkboxDiv').css('border-color', 'red');
                                $('#checkboxDiv2').css('border-color', 'red');
                                $('#checkboxDiv2').css('border-style', 'solid');
                                
                                // START - Juhi Changes : Sept 06 - CSS when payment type is not selected
                                 
                                $('#checkboxDiv_ErrorMsg2').show();
                                // END - Juhi Changes : Sept 06 - CSS when payment type is not selected
                            }
                            else
                            {
                                if(cartCheckoutViewHere.model.attributes.selectedBMSResult != undefined && cartCheckoutViewHere.model.attributes.selectedBMSResult.AvailableCredit >= cartCheckoutViewHere.model.attributes.totalAmount && (cartCheckoutViewHere.model.attributes.selectedBMSResult.PaymentType == "CHARGE" || cartCheckoutViewHere.model.attributes.selectedBMSResult.PaymentType == "CBILL" ))
                                {
                                    
                                }
                                else
                                {
                                    isValid=false;
                                    //$("#BMS-Account-Model").modal('show');
                                    if(creditMsj && !isFWPrd){
                                        // do nothing
                                    }else{
                                        $("#BMS-Account-Model").css("display", "block");
                                    }
                                }
                            }
                            if($("#BMSAccountIAMCustomerCode").val()=='')
                            {
                                isValid=false;
                               
                                $('#checkboxDiv2').css('border-color', 'red');
                                $('#checkboxDiv2').css('border-style', 'solid');
                                $('#ThirdPartyMsg').css("display", "block");
                               
                            }
                             if(cartCheckoutViewHere.model.attributes.ThirdPartyMsg=='true')
                            {
                                isValid=false;
                               
                                $('#checkboxDiv2').css('border-color', 'red');
                                $('#checkboxDiv2').css('border-style', 'solid');
                                $('#ThirdPartyMsg').css("display", "block");
                               
                            }
                            
                        }
                        
                        
                         _.each(addresses, function(addresstype){
                         
                            var address1 = '[name="'+addresstype+'.address1"]'; 
                            if($(address1).val()==''){
                                isValid=false;
                                $(address1).css('border-color', 'red');
                                 console.log('Step 1 '+address1);
                            }
                            else {
                                $(address1).css('border-color', '');
                            }
                            
                            
                            var city = '[name="'+addresstype+'.city"]';
                            if($(city).val()==''){
                            
                                isValid=false;
                                $(city).css('border-color', 'red');
                                console.log('Step 2 '+city);
                            }
                            else {
                                
                                $(city).css('border-color', '');
                                
                            }
                            
                            var state;
                            if(addresstype.includes('billing'))
                            {
                                state='.billingstate';
                            }
                            else{state='.shippingstate'; }
                            console.log('==$(state).val()=='+$(state).val());
                            if($(state).val()==null){
                                isValid=false;
                                $(state).css('border-color', 'red');
                                console.log('Step 3 '+state);
                            }else {
                                $(state).css('border-color', '');
                            }
                            
                                var country;
                            if(addresstype.includes('billing'))
                            {
                                country='.billingcountry';
                            }
                            else{country='.shippingcountry'; }
                            console.log('==$(country).val()=='+$(country).val());
                            if($(country).val()==null){
                                isValid=false;
                                $(country).css('border-color', 'red');
                                console.log('Step 4 '+country);
                            }else {
                                $(country).css('border-color', '');
                            }
                            
                             // $('.billingcountry').val('US');
                             //$('.billingcountry').attr('disabled', false);
                
                             //$('.shippingcountry').val('US');
                             //$('.shippingcountry').attr('disabled', true);
                        
                            
                            
                            
                            var postal = '[name="'+addresstype+'.postalCode"]';
                            if($(postal).val()==''){
                                isValid=false;
                                $(postal).css('border-color', 'red');
                                console.log('Step 5 '+postal);
                            }else {
                                $(postal).css('border-color', '');
                            }
                    
                         
                         console.log('AddressListing:Step2'+isValid);
                           if($("#BMSAccountIAMCustomerCode").val() !='')
                            {
                                $('#checkboxDiv2').css('border-color', 'none');
                                $('#checkboxDiv2').css('border-style', 'none');
                                $('#ThirdPartyMsg').css("display", "none");
                               
                            }
                         //added by sharad to validate first name and last name
                         var format = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?0123456789]/;
                         
                         var firstNameComponent = $('#firstNameField');
                         /*if(format.test(firstNameComponent.val()) || firstNameComponent.val().trim() == "")
                         {
                            isValid=false;
                            $(firstNameComponent).css('border-color', 'red');
                            console.log('Step 6 '+firstNameComponent);
                         }
                         else 
                         {
                            $(firstNameComponent).css('border-color', '');
                         }
                         
                         
                         var lastNameComponent = $('#lastNameField');
                         if(format.test(lastNameComponent.val()) || lastNameComponent.val().trim() == "" )
                         {
                            isValid=false;
                            $(lastNameComponent).css('border-color', 'red');
                            console.log('Step 6 '+lastNameComponent);
                         }
                         else 
                         {
                            $(lastNameComponent).css('border-color', '');
                         }
                         */
                         
                         
                         // Sharad's code end
                         
                         
                         });
                         
                         
                         
                        
                        return isValid;
                    }
                        
                   
                });
                
                addListView.delegateEvents();
                
            });
                    
                                                 
              CCRZ.pubSub.on('view:AddressListing:refresh', function(addListView){
            
                                addressView = addListView;
                                
                            
                                
                            console.log('Inside initContactInfo : ');
                            
                           
                            // START - Juhi Changes : Sept 10 - Change User INfo Details from User to Contact
                           // console.log('====Inside Contact =='+$('.cmi-po').is(':checked'));
                            // CHANGE for DISTRIBUTOR_ADMIN_License Issue - taking the user details instead of contact
                            // Comment out below by Yubo Due to defect MAR-401, there is no need to render field here;
                            // var contactInfo = CCRZ.cartCheckoutModel.attributes.contactR;
                            
                            // $('#firstNameField').val(CCRZ.cartCheckoutModel.attributes.contactR.firstName);
                            // $('#lastNameField').val(CCRZ.cartCheckoutModel.attributes.contactR.lastName);
                            // $('#homePhoneField').val(contactInfo.Phone);
                            // $('#emailField').val(contactInfo.Email); 
                            
                            // END - Juhi Changes : Sept 10 - Change User Info Details from User to Contact
                            
                            /* commented as part of MAR-1222
                            jQuery("input.contactInput ").attr("readonly", true);
                            $('input.contactInput ').attr('disabled', true);
                            */
                            addListView.blankAddresses = function(event) {                            
                            
                                console.log('Inside blankAddresses : ');
                                var firstName = $('#firstNameField').val();
                                var lastName = $('#lastNameField').val();
                                var phone = $('#homePhoneField').val();
                                var email = $('#emailField').val(); 
                            
                                isUpdateCartPayRequired = true;
                                if(cartCheckoutViewHere.model.attributes.thirdPartyPaymentChcked) {                                    
                                    $("#shippingAddressSelector").css("display", "none");                                    
                                }
                                else
                                {
                                    $("#shippingAddressSelector").css("display", "block");
                                    console.log($('[name="billingAddress.firstName"]').val());
                                    var objLink = $(event.target);
                                    console.log(objLink);
                                    var paymentTypeSel = objLink.data("paymenttype");
                                    console.log('Id got on selection of payment : '+paymentTypeSel);
                                    if(paymentTypeSel=='PO') {
                                        if(cartCheckoutViewHere != undefined)
                                        {
                                            if(cartCheckoutViewHere.model.attributes.IsGOMSAccount==false)
                                            {
                                                cartCheckoutViewHere.model.attributes.selectedPaymentMethod = "po";
                                                jQuery("input.billingField").attr("readonly", true);
                                                $('select.billingField').attr('disabled', true);
                            
                                                $('.billingstate').attr('disabled', true);
                                                $('.billingstate').attr('readonly', true);
                                            
                                            }
                                            else
                                            {
                                                cartCheckoutViewHere.model.attributes.selectedPaymentMethod = "po";
                                                jQuery("input.billingField").attr("readonly", false);
                                                $('select.billingField').attr('disabled', false);
                            
                                                $('.billingstate').attr('disabled', false);
                                                $('.billingstate').attr('readonly',false);
                                                $('.billingcountry').attr('disabled',false);
                                            }
                                        
                                        }
                                        
                                            
                                    }
                                    if(paymentTypeSel=='CC')
                                    {
                                        if(cartCheckoutViewHere != undefined)
                                        {
                                        cartCheckoutViewHere.model.attributes.selectedPaymentMethod = "cc";
                                        jQuery("input.billingField").attr("readonly", false);
                                        $('select.billingField').attr('disabled', false);

                                        $('.billingstate').attr('disabled', false);
                                        }
                                    }
                                                                                                    
                                                                                                    
                                    console.log('Step 1111');
                                    if(CCRZ.cartCheckoutView.model.attributes.selectedPaymentMethod == 'cc')
                                    addListView.renderBillStates('','');
                                    addListView.renderShipStates('','');
                                    updateCCModelBasedOnSelectedPaymentType('changeselection');
                                    
                                    if(null!= $('.billingcountry'))
                                    {
                                        //if(CCRZ.cartCheckoutView.model.attributes.selectedPaymentMethod == 'cc')
                                            //addListView.renderBillStates('','US');
                                            
                                        //$('.billingcountry').val('US');
                                        if(CCRZ.cartCheckoutView.model.attributes.IsGOMSAccount==false)
                                        {
                                            $('.billingcountry').val('US');
                                            $('.billingcountry').attr('disabled', true);
                                        }
                                        else
                                        {
                             
                                            $('.billingcountry').attr('disabled', false);
                                            //addListView.renderBillStates('','US')
                                        }
                                        
                                    }
                                    if(null != $('.shippingcountry'))
                                    {
                                        //addListView.renderShipStates('','US');
                                        //$('.shippingcountry').val('US');
                                        if(CCRZ.cartCheckoutView.model.attributes.IsGOMSAccount==false)
                                        {
                                            addListView.renderShipStates('','US');
                                            $('.shippingcountry').val('US');
                                            $('.shippingcountry').attr('disabled', true); 
                                        }
                                        else{
                                        $('.shippingcountry').attr('disabled', false);
                                        }
                                    }
                                
                                }
                                $('#firstNameField').val(firstName);
                                $('#lastNameField').val(lastName);
                                $('#homePhoneField').val(phone);
                                $('#emailField').val(email);
                            }
                            

                        addListView.processReadOnlyLogic = function(event) {
                        console.log('Inside processReadOnlyLogic  ');
                            if(cartCheckoutViewHere.model.attributes.selectedPaymentMethod == "po" || cartCheckoutViewHere.model.attributes.thirdPartyPaymentChcked)
                            {
                                if(CCRZ.cartCheckoutModel.attributes.billingAddress != undefined )
                                {
                                    //$("#shippingAddressSelector").css("display", "none");
                                        if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount==false)
                                        {
                                            $("#shippingAddressSelector").css("display", "none");
                                            jQuery("input.billingField").attr("readonly", true);
                                            $('select.billingField').attr('disabled', true);
                                            
                                            addListView.renderBillStates('','US');
                                            $('.billingstate').attr('disabled', true);
                                            $('.billingstate').attr('readonly', true);
                                            $(".billingAddress1").val('');
                                            $(".billingAddress2").val('');
                                            $(".billingAddress3").val('');
                                            $(".billingCity").val('');
                                            $(".billingPostalCode").val('');
                                        }
                                        else
                                        {
                                            $("#shippingAddressSelector").css("display", "block");
                                            jQuery("input.billingField").attr("readonly", false);
                                            $('select.billingField').attr('disabled', false);
                                            
                                            //addListView.renderBillStates('','');
                                            //addListView.renderBillStates('','US');
                                            //$('.billingcountry').val(CCRZ.cartCheckoutModel.attributes.billingAddress.countryCode);
                                            if(CCRZ.cartCheckoutModel.attributes.billingAddress.countryCode!=undefined)
                                            {
                                                addListView.renderBillStates('',CCRZ.cartCheckoutModel.attributes.billingAddress.countryCode);
                                            }
                                            else
                                            {
                                                addListView.renderBillStates('',CCRZ.cartCheckoutModel.attributes.billingAddress.BillingCountryCode);
                                            }
                                            //addListView.renderShipStates('',CCRZ.cartCheckoutModel.attributes.shippingAddress.ShippingCountryCode);
                                            $('.billingstate').attr('disabled', false);
                                            $('.billingstate').attr('readonly', false);
                                            $('.billingcountry').attr('disabled', false);
                                            if($('.shippingstate option').length == 0)
                                                 {
                                                     //$(".shippingstate").val(CCRZ.cartCheckoutModel.attributes.billingAddress.state);
                                                     //console.log('option0');
                                                     $('#shippingstatelabel').css("display", "none");
                                                 }
                                        }
                                        
                                        //$(".billingstate").val(newBillingAddress[0].State);
                                        //$(".billingcountry").val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].countryCode);
                                        
                                        //$('.billingstate').val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].stateCode);
                                if(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList.length > 0)
                                {
                                        // debugger; use debugger in console 
                                        $(".billingAddress1").val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].address1);
                                        //$(".billingAddress2").val('');
                                        //$(".billingAddress3").val('');
                                        if(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].address2!=undefined)
                                        {
                                             $(".billingAddress2").val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].address2);
                                        }
                                        else
                                        {
                                            $(".billingAddress2").val('');
                                        }
                                        if(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].address3!=undefined)
                                        {
                                             $(".billingAddress3").val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].address3);
                                        }
                                        else
                                        {
                                             $(".billingAddress3").val('');
                                        }
                                        $(".billingCity").val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].city);
                                        //$(".billingstate").val(newBillingAddress[0].State);
                                        $(".billingcountry").val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].countryCode);
                                        $(".billingPostalCode").val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].postalCode);
                                        $('.billingstate').val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].stateCode);
                                        $('[name="billingAddress.partnerId"]').val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].partnerId);
                                        $("#BMS-Search-Model").modal('hide');
                                        CCRZ.cartCheckoutView.model.attributes.selectedPaymentMethod = 'po';
                                        isUpdateCartPayRequired = true;
                                }else{
                                    $(".billingAddress1").val(CCRZ.cartCheckoutModel.attributes.billingAddress.address1);
                                        //$(".billingAddress2").val('');
                                        //$(".billingAddress3").val('');
                                        if(CCRZ.cartCheckoutModel.attributes.billingAddress.address2!=undefined)
                                        {
                                             $(".billingAddress2").val(CCRZ.cartCheckoutModel.attributes.billingAddress.address2);
                                        }
                                        else
                                        {
                                            $(".billingAddress2").val('');
                                        }
                                        if(CCRZ.cartCheckoutModel.attributes.billingAddress.address3!=undefined)
                                        {
                                             $(".billingAddress3").val(CCRZ.cartCheckoutModel.attributes.billingAddress.address3);
                                        }
                                        else
                                        {
                                             $(".billingAddress3").val('');
                                        }
                                        $(".billingCity").val(CCRZ.cartCheckoutModel.attributes.billingAddress.city);
                                        //$(".billingstate").val(newBillingAddress[0].State);
                                        //$(".billingcountry").val(CCRZ.cartCheckoutModel.attributes.billingAddress.BillingCountryCode);
                                        if(CCRZ.cartCheckoutModel.attributes.billingAddress.countryCode!=undefined)
                                        {
                                        $(".billingcountry").val(CCRZ.cartCheckoutModel.attributes.billingAddress.countryCode);
                                        console.log('country1');
                                        }
                                        else
                                        {
                                        $(".billingcountry").val(CCRZ.cartCheckoutModel.attributes.billingAddress.BillingCountryCode);
                                        console.log('country2');
                                        }
                                        $(".billingPostalCode").val(CCRZ.cartCheckoutModel.attributes.billingAddress.postalCode);
                                        //$('.billingState').val(CCRZ.cartCheckoutModel.attributes.billingAddress.state);
                                       // $('.billingstate').val(CCRZ.cartCheckoutModel.attributes.billingAddress.BillingStateCode);
                                       if(CCRZ.cartCheckoutModel.attributes.billingAddress.stateCode!=undefined)
                                        {
                                        $('.billingstate').val(CCRZ.cartCheckoutModel.attributes.billingAddress.stateCode);
                                        console.log('state1');
                                        }
                                        else
                                        { 
                                                 if($('.billingstate option').length == 0)
                                                 {
                                                     $(".billingstate").val(CCRZ.cartCheckoutModel.attributes.billingAddress.state);
                                                     console.log('option0');
                                                     $('#billingstatelabel').css("display", "none");
                                                 }
                                                 else
                                                 {
                                                     $(".billingstate").val(CCRZ.cartCheckoutModel.attributes.billingAddress.BillingStateCode);
                                                 }
                                        
                                        }
                                        //$('[name="billingAddress.partnerId"]').val(CCRZ.cartCheckoutModel.attributes.billingAddress.addressList[0].partnerId);
                                        $("#BMS-Search-Model").modal('hide');
                                        CCRZ.cartCheckoutView.model.attributes.selectedPaymentMethod = 'po';
                                        isUpdateCartPayRequired = true;
                                }

                                }
                                if(cartCheckoutViewHere.model.attributes.thirdPartyPaymentChcked)
                                {
                                    
                                        console.log('making read only as true');
                                        jQuery("input.billingField").attr("readonly", true);
                                        $('select.billingField').attr('disabled', true);
                                        $('.billingstate').attr('disabled', true);
                                        $('.billingstate').attr('readonly', true);
                                        $("#shippingAddressSelector").css("display", "none");
                                        
                                        
                                        $(".billingAddress1").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.LocationAddressline1);
                                        $(".billingAddress2").val('');
                                        $(".billingAddress3").val('');
                                        $(".billingCity").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.City);
                                        $(".billingstate").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.State);
                                        $(".billingcountry").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.Country);
                                        $(".billingPostalCode").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.Postalcode1);
                                        //$(".billingstatecode").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.State);
                                        $("#BMS-Search-Model").modal('hide');
                                
                                
                                        //shipping fields
                                        //$('select.shippingField').attr('disabled', true);
                                        /*
                                         jQuery("input.shippingField").attr("readonly", true);
                                        
                                        $('.shippingstate').attr('disabled', true);
                                        $('.shippingstate').attr('readonly', true);
                                        */
                                    /*if(!cartCheckoutViewHere.model.attributes.thirdPartyPaymentChcked)
                                    {
                                        $("#shippingAddressSelector").css("display", "block");
                                    }
                                    */
                                }
                                
                                   
                            }
                            else
                            {
                                $("#shippingAddressSelector").css("display", "block");
                                console.log('making read only as false');
                                jQuery("input.billingField").attr("readonly", false);
                                $('select.billingField').attr('disabled', false);
                                $('.billingstate').attr('disabled', false);
                                
                                //shipping fields
                                jQuery("input.shippingField").attr("readonly", false);
                                $('select.shippingField').attr('disabled', false);
                                $('.shippingstate').attr('disabled', false);
                            }
                            
                            if(null!= $('.billingcountry'))
                            {
                                if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount==false)
                                {
                                    $('.billingcountry').val('US');
                                    $('.billingcountry').attr('disabled', true);
                                }
                                else
                                {
                                    //$('.billingcountry').val('US');
                                    $('.billingcountry').attr('disabled', false);
                                    if(CCRZ.cartCheckoutModel.attributes.billingAddress.countryCode!=undefined)
                                    {
                                      $('.billingcountry').val(CCRZ.cartCheckoutModel.attributes.billingAddress.countryCode);
                                    }
                                    else
                                    {
                                        $('.billingcountry').val(CCRZ.cartCheckoutModel.attributes.billingAddress.BillingCountryCode);
                                    }
                                    //addListView.renderBillStates('','US')
                                }
                            }
                            if(null != $('.shippingcountry'))
                            {
                                if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount==false)
                                {
                                    $('.shippingcountry').val('US');
                                    $('.shippingcountry').attr('disabled', true); 
                                }
                                else
                                {
                                    //$('.shippingcountry').val('US');
                                    $('.shippingcountry').attr('disabled', false);
                                    //addListView.renderShipStates('','US');
                                    if(CCRZ.cartCheckoutModel.attributes.shippingAddress.countryCode!=undefined)
                                    {
                                        $('.shippingcountry').val(CCRZ.cartCheckoutModel.attributes.shippingAddress.countryCode);
                                    }
                                    else
                                    {
                                        $('.shippingcountry').val(CCRZ.cartCheckoutModel.attributes.shippingAddress.ShippingCountryCode);
                                    }
                                    //$('.shippingstate').val(CCRZ.cartCheckoutModel.attributes.shippingAddress.stateCode);
                                    
                                }
                            }
                            //$('.billingstate').val(CCRZ.cartCheckoutModel.attributes.billingAddress.state);                                                                 
                            
                        } 
                        
                        addListView.updatePaymentMethod = function(event) {
                       
                       console.log('Inside updatePaymentMethod  ');
                        
                        //reset the flags so that when user comes back to UI tab,fresh information is retrieved
                        var IAMCustomerCode=$("#BMSAccountIAMCustomerCode").val();
                        console.log('IAMCustomerCode>>>>>'+IAMCustomerCode);
                        if(isUpdateCartPayRequired){
                            CCRZ.subsc = _.extend(CCRZ.subsc||{});
                            
                            
                                    if(cartCheckoutViewHere.model.attributes.thirdPartyPaymentChcked != undefined && cartCheckoutViewHere.model.attributes.thirdPartyPaymentChcked &&  cartCheckoutViewHere.model.attributes.selectedBMSResult != undefined )
                                    {
                                        CCRZ.subsc.UserAccountDataAction.updatePaymentMethod(cartCheckoutViewHere.model.attributes.selectedPaymentMethod, cartCheckoutViewHere.model.attributes.thirdPartyPaymentChcked,cartCheckoutViewHere.model.attributes.selectedBMSResult.CustomerCode,cartCheckoutViewHere.model.attributes.selectedBMSResult.CustomerName,IAMCustomerCode); 
                                    }
                                    else
                                    {
                                        CCRZ.subsc.UserAccountDataAction.updatePaymentMethod(                               cartCheckoutViewHere.model.attributes.selectedPaymentMethod,false,'','',''); 
                                    }
                                }
                            
                                
                        }                          
                            
                        
                        
                        addListView.updateEDQAddress = function(event) {
                       
                            console.log('Inside updateEDQAddressMethod  ');
                       
                            //Getting selected billing address to pass on to the EDQ method...
                            var billData = form2js('billingAddressForm', '.', false, function(node) {}, false);
                            billData.billingAddress.country = $( ".billingcountry option:selected" ).text();
                            billData.billingAddress.countryCode = $('[name="billingAddress.countryCode"]').val();
                            billData.billingAddress.state = $( ".billingstate option:selected" ).text();
                            var billStateCode = $('[name="billingAddress.stateCode"]').val();
                            billData.billingAddress.stateCode = billStateCode;
                            billData.billingAddress.postalCode=$('[name="billingAddress.postalCode"]').val();
                            billData.billingAddress.city=$('[name="billingAddress.city"]').val();

                            var address1=billData.billingAddress.address1;
                            var address2=billData.billingAddress.address2;
                            var address3=billData.billingAddress.address3;
                            var city=billData.billingAddress.city;
                            var state=billData.billingAddress.state;
                            var country =billData.billingAddress.country;
                            var postalCode=billData.billingAddress.postalCode;
                            var countryCode=billData.billingAddress.countryCode;
                            var showPopup=false;
                            
                            //Getting selected Shipping address to pass on to EDQ Method....
                            var shipData = form2js('shippingAddressForm', '.', false, function(node) {}, false);
                            //country info
                            shipData.shippingAddress.country = $( ".shippingcountry option:selected" ).text();
                            shipData.shippingAddress.countryCode = $('[name="shippingAddress.countryCode"]').val();
                            var shippingCountry=shipData.shippingAddress.country;
                            //state info
                            shipData.shippingAddress.state = $( ".shippingstate option:selected" ).text();
                            var shipStateCode = $('[name="shippingAddress.stateCode"]').val();
                            var shippingState=shipData.shippingAddress.state;
                            //city info
                             shipData.shippingAddress.city=$('[name="shippingAddress.city"]').val();
                            //postal code
                             shipData.shippingAddress.postalCode=$('[name="shippingAddress.postalCode"]').val();
                           
                            shipData.shippingAddress.stateCode = shipStateCode;
                            var shippingAddress1=shipData.shippingAddress.address1;
                            var shippingAddress2=shipData.shippingAddress.address2;
                            var shippingAddress3=shipData.shippingAddress.address3;
                            var shippingCity=shipData.shippingAddress.city;
                            var shippingCountryCode= shipData.shippingAddress.countryCode ;
                            var shippingPostalCode=shipData.shippingAddress.postalCode;
                          
                            //clearing old values before poplating new values ...
                            $("#EDQBillingAddr1").text('');
                            $("#EDQBillingAddr2").text('');
                            $("#EDQBillingAddr3").text('');
                            $("#EDQBillingCity").text('');
                            $("#EDQBillingState").text('');
                            $("#EDQBillingCountry").text('');
                            $("#EDQBillingPostalCode").text('');
                            $("#ErrorBilling").text('');
                            $("#EDQShippingAddr1").text('');
                            $("#EDQShippingAddr2").text('');
                            $("#EDQShippingAddr3").text('');
                            $("#EDQShippingCity").text('');
                            $("#EDQShippingState").text('');
                            $("#EDQShippingCountry").text('');
                            $("#EDQShippingPostalCode").text('');
                            $("#ErrorShipping").text('');
                            
                             console .log(address1+address2+address3+city+state+country+postalCode);
                            CCRZ.subsc = _.extend(CCRZ.subsc||{});
                               CCRZ.subsc.UserAccountDataAction.updateEDQAddress(address1,address2,address3,city,billStateCode,countryCode,postalCode,shippingAddress1,shippingAddress2,shippingAddress3,shippingCity,shipStateCode,shippingCountryCode,shippingPostalCode,function(response)
                               {
                                 responseFromCtrl=response;
                                 console.log("==== in method to EDQ address from backend"+responseFromCtrl.data.EDQBillingAddress);
                                 if(responseFromCtrl!=undefined){
                                      console.log("responseFromCtrl.success"+responseFromCtrl.success);
                                     if(responseFromCtrl.success)
                                     {
                                        var EDQBillingAddr=responseFromCtrl.data.EDQBillingAddress;
                                        var EDQShippingAddr=responseFromCtrl.data.EDQShippingAddress;
                                        console.log('EDQBillingAddr>>>'+EDQBillingAddr);
                                        console.log('EDQShippingAddr>>>'+EDQBillingAddr);
                                        if(responseFromCtrl.data.contactDetails != undefined) {
                                            CCRZ.cartCheckoutModel.attributes.contactDetails = responseFromCtrl.data.contactDetails;
                                        }
                                        
                                        if(EDQBillingAddr!=undefined)
                                        {
                                            $("#EDQBillingAddr1").text(EDQBillingAddr.cleasendBillingAdd1);
                                            console.log('EDQBillingAddr1>>>'+EDQBillingAddr1);
                                            $("#EDQBillingAddr2").text(EDQBillingAddr.cleasendBillingAdd2);
                                            $("#EDQBillingAddr3").text(EDQBillingAddr.cleasendBillingAdd3);
                                            $("#EDQBillingCity").text(EDQBillingAddr.cleasendBillingCity);
                                            $("#EDQBillingState").text(EDQBillingAddr.cleasendBillingState);
                                            $("#EDQBillingCountry").text(EDQBillingAddr.cleasendBillingCountry);
                                            $("#EDQBillingPostalCode").text(EDQBillingAddr.cleasendBillingPostalCode);
                                        }
                                        else{
                                            var ErrorCheckBilling= responseFromCtrl.data.ErrorCheckBilling;
                                            var ErrorCodeBilling= responseFromCtrl.data.ErrorCodeBilling;
                                            console.log("ErrorCheckBilling>>>"+ErrorCheckBilling);
                                            if(ErrorCheckBilling !=undefined && ErrorCheckBilling==true)
                                            {
                                                 if(ErrorCodeBilling!=undefined)
                                                 {
                                                  $("#ErrorBilling").text(ErrorCodeBilling);
                                                 }
                                            }
                                            
                                            
                                        }
                                        if(EDQShippingAddr!=undefined)
                                        {
                                            console.log('enter in shipping block');
                                            $("#EDQShippingAddr1").text(EDQShippingAddr.cleasendShippingAdd1);
                                            console.log('EDQShippingAddr1>>>'+EDQShippingAddr.cleasendShippingAdd1);
                                            $("#EDQShippingAddr2").text(EDQShippingAddr.cleasendShippingAdd2);
                                            $("#EDQShippingAddr3").text(EDQShippingAddr.cleasendShippingAdd3);
                                            $("#EDQShippingCity").text(EDQShippingAddr.cleasendShippingCity);
                                            $("#EDQShippingState").text(EDQShippingAddr.cleasendShippingState);
                                            $("#EDQShippingCountry").text(EDQShippingAddr.cleasendShippingCountry);
                                            $("#EDQShippingPostalCode").text(EDQShippingAddr.cleasendShippingPostalCode);
                                        }
                                        else{
                                            var ErrorCheckShipping= responseFromCtrl.data.ErrorCheckShipping;
                                            var ErrorCodeShipping= responseFromCtrl.data.ErrorCodeShipping;
                                            console.log("ErrorCheckShipping>>>"+ErrorCheckShipping);
                                            console.log("ErrorCodeShipping"+ErrorCodeShipping);
                                            if(ErrorCheckShipping !=undefined && ErrorCheckShipping==true)
                                            {
                                                 if(ErrorCodeShipping!=undefined)
                                                 {
                                                  $("#ErrorShipping").text(ErrorCodeShipping);
                                                  
                                                 }
                                            }
                                            
                                            
                                        }
                                        if(EDQBillingAddr!=undefined || EDQShippingAddr!=undefined)
                                        {
                                            showPopup=true;
                                        }
                                         
                                         console.log('showPopup 2' + showPopup);
                                        //binding already selected billing address
                                        $("#BillingAddr1").text(address1);
                                        $("#BillingAddr2").text(address2);
                                        $("#BillingAddr3").text(address3);
                                        $("#BillingCity").text(city);
                                        $("#BillingState").text(state);
                                        $("#BillingCountry").text(country);
                                        $("#BillingPostalCode").text(postalCode);
                                        $("#BillingStateCode").text(billStateCode);
                                        
                                        //binding already selected shipping address
                                        $("#ShippingAddr1").text(shippingAddress1);
                                        $("#ShippingAddr2").text(shippingAddress2);
                                        $("#ShippingAddr3").text(shippingAddress3);
                                        $("#ShippingCity").text(shippingCity);
                                        $("#ShippingState").text(shippingState);
                                        $("#ShippingStateCode").text(shipStateCode);
                                        $("#ShippingCountry").text(shippingCountry);
                                        $("#ShippingPostalCode").text(shippingPostalCode);
                                        
                                        if(showPopup==true)
                                        {
                                            $('#EDQModel').modal('show');
                                            $(".messagingSection-FreeTrial-Error").css("display", "none");
                                            $("#ErrorMsgDenger").html("");    
                                        }
                                        else
                                        {
                                            console.log("in else blocl>>>");
                                            addListView.processUserInfoCustom();
                                            //$('.osm_processUserInfo').trigger("click");
                                            //$('.cc_process_user_info').trigger("click"); 
                                        }
                                        
                                     }
                                    }
                               });  
                              
                            
                        }
                        
                        
                        addListView.updateEDQAddressPO = function(event) {
                       
                            console.log('Inside updateEDQAddressMethod  ');
                       
                           
                            var showPopup=false;
                            
                            //Getting selected Shipping address to pass on to EDQ Method....
                            var shipData = form2js('shippingAddressForm', '.', false, function(node) {}, false);
                            //country info
                            shipData.shippingAddress.country = $( ".shippingcountry option:selected" ).text();
                            shipData.shippingAddress.countryCode = $('[name="shippingAddress.countryCode"]').val();
                            var shippingCountry=shipData.shippingAddress.country;
                            //state info
                            shipData.shippingAddress.state = $( ".shippingstate option:selected" ).text();
                            var shipStateCode = $('[name="shippingAddress.stateCode"]').val();
                            var shippingState=shipData.shippingAddress.state;
                            //city info
                             shipData.shippingAddress.city=$('[name="shippingAddress.city"]').val();
                            //postal code
                             shipData.shippingAddress.postalCode=$('[name="shippingAddress.postalCode"]').val();
                           
                            shipData.shippingAddress.stateCode = shipStateCode;
                            var shippingAddress1=shipData.shippingAddress.address1;
                            var shippingAddress2=shipData.shippingAddress.address2;
                            var shippingAddress3=shipData.shippingAddress.address3;
                            var shippingCity=shipData.shippingAddress.city;
                            var shippingCountryCode= shipData.shippingAddress.countryCode ;
                            var shippingPostalCode=shipData.shippingAddress.postalCode;
                          
                            //clearing old values before poplating new values ...
                            
                            $("#EDQShippingAddr1").text('');
                            $("#EDQShippingAddr2").text('');
                            $("#EDQShippingAddr3").text('');
                            $("#EDQShippingCity").text('');
                            $("#EDQShippingState").text('');
                            $("#EDQShippingCountry").text('');
                            $("#EDQShippingPostalCode").text('');
                            $("#ErrorShipping").text('');
                            
                            CCRZ.subsc = _.extend(CCRZ.subsc||{});
                               CCRZ.subsc.UserAccountDataAction.updateEDQAddressPO(shippingAddress1,shippingAddress2,shippingAddress3,shippingCity,shipStateCode,shippingCountryCode,shippingPostalCode,function(response)
                               {
                                 responseFromCtrl=response;
                                 console.log("==== in method to EDQ address from backend");
                                 if(responseFromCtrl!=undefined){
                                
                                     if(responseFromCtrl.success)
                                     {
                                        var EDQShippingAddr=responseFromCtrl.data.EDQShippingAddress;
                                        console.log('EDQShippingAddr>>>'+EDQShippingAddr);
                                        if(responseFromCtrl.data.contactDetails != undefined) {
                                            CCRZ.cartCheckoutModel.attributes.contactDetails = responseFromCtrl.data.contactDetails;
                                        }
                                       
                                        if(EDQShippingAddr!=undefined)
                                        {
                                            console.log('enter in shipping block');
                                            $("#EDQShippingAddr1PO").text(EDQShippingAddr.cleasendShippingAdd1);
                                            console.log('EDQShippingAddr1>>>'+EDQShippingAddr.cleasendShippingAdd1);
                                            $("#EDQShippingAddr2PO").text(EDQShippingAddr.cleasendShippingAdd2);
                                            $("#EDQShippingAddr3PO").text(EDQShippingAddr.cleasendShippingAdd3);
                                            $("#EDQShippingCityPO").text(EDQShippingAddr.cleasendShippingCity);
                                            $("#EDQShippingStatePO").text(EDQShippingAddr.cleasendShippingState);
                                            $("#EDQShippingCountryPO").text(EDQShippingAddr.cleasendShippingCountry);
                                            $("#EDQShippingPostalCodePO").text(EDQShippingAddr.cleasendShippingPostalCode);
                                        }
                                        else{
                                            var ErrorCheckShipping= responseFromCtrl.data.ErrorCheckShipping;
                                            var ErrorCodeShipping= responseFromCtrl.data.ErrorCodeShipping;
                                            console.log("ErrorCheckShipping>>>"+ErrorCheckShipping);
                                            console.log("ErrorCodeShipping"+ErrorCodeShipping);
                                            if(ErrorCheckShipping !=undefined && ErrorCheckShipping==true)
                                            {
                                                 if(ErrorCodeShipping!=undefined)
                                                 {
                                                  $("#ErrorShippingPO").text(ErrorCodeShipping);
                                                  
                                                 }
                                            }
                                            
                                            
                                        }
                                        if(EDQShippingAddr != undefined)
                                        {
                                            showPopup=true;
                                        }
                                         
                                        
                                        //binding already selected shipping address
                                        $("#ShippingAddr1PO").text(shippingAddress1);
                                        $("#ShippingAddr2PO").text(shippingAddress2);
                                        $("#ShippingAddr3PO").text(shippingAddress3);
                                        $("#ShippingCityPO").text(shippingCity);
                                        $("#ShippingStatePO").text(shippingState);
                                        $("#ShippingStateCodePO").text(shipStateCode);
                                        $("#ShippingCountryPO").text(shippingCountry);
                                        $("#ShippingPostalCodePO").text(shippingPostalCode);
                                        
                                        if(showPopup==true)
                                        {
                                            $('#EDQModelPO').modal('show');
                                            $(".messagingSection-FreeTrial-Error").css("display", "none");
                                            //$("#ErrorMsgDenger").html("");    
                                        }
                                        else
                                        {
                                            console.log("in else blocl>>>");
                                            //$('.osm_processUserInfo').trigger("click");
                                            addListView.processUserInfoCustom();
                                            //$('.cc_process_user_info').trigger("click"); 
                                        }
                                        
                                     }
                                    }
                               });  
                              
                            
                        }
                        
                        addListView.thirpatyPaymentchwckbox = function(event)
                        {
                            CCRZ.cartCheckoutView.model.attributes.selectedBMSResult = undefined;
                            CCRZ.cartCheckoutView.model.attributes.searchBMSString = '';
                            console.log(event.target.checked);
                            if(event.target.checked)
                            {
                                CCRZ.cartCheckoutView.model.attributes.thirdPartyPaymentChcked = true;
                                
                                if(CCRZ.cartCheckoutView.model.attributes.InitdisplayPaymentMethods.includes("po"))
                                {
                                    CCRZ.cartCheckoutView.model.attributes.displayPaymentMethods = 'po';
                                }
                                else
                                {
                                    //CCRZ.cartCheckoutView.model.attributes.displayPaymentMethods = '';
                                    CCRZ.cartCheckoutView.model.attributes.displayPaymentMethods = 'po';
                                }
                                
                                CCRZ.cartCheckoutView.model.attributes.poType = 'OneBMS';
                            

                                var firstName = $('#firstNameField').val();
                                var lastName = $('#lastNameField').val();
                                var phone = $('#homePhoneField').val();
                                var email = $('#emailField').val();
                                
                                CCRZ.cartCheckoutView.model.attributes.contactDetails.FirstName = firstName;
                                CCRZ.cartCheckoutView.model.attributes.contactDetails.LastName = lastName;
                                CCRZ.cartCheckoutView.model.attributes.contactDetails.Phone = phone;
                                CCRZ.cartCheckoutView.model.attributes.contactDetails.Email = email;
                                
                                this.render();
                                $(".cmi-po").prop("checked",true);
                                $('.cmi-po').trigger("click");
                                
                                $("#shippingAddressSelector").css("display", "none");
                                jQuery("input.billingField").attr("readonly", true);
                                $('select.billingField').attr('disabled', true);
                               //Mar-1284 start
                                $('.billingcountry').val('US');
                                addListView.renderBillStates('','US');
                                $('.billingstate').attr('disabled', true);
                                $('.billingstate').attr('readonly', true);
                                $('.billingstate').val('');
                                $('.shippingcountry').val('US');
                                //Mar-1284 ---END
                                CCRZ.cartCheckoutView.model.attributes.selectedPaymentMethod = 'po';
                                $('[name="billingAddress.firstName"]').val('');
                                    $('[name="billingAddress.lastName"]').val('');
                                    $('[name="billingAddress.country"]').val('');
                                    $('[name="billingAddress.companyName"]').val('');
                                    $('.billingstate').val('');
                                
                                    $('[name="billingAddress.address1"]').val('');  
                                    $('[name="billingAddress.address2"]').val('');  
                                    $('[name="billingAddress.address3"]').val('');  
                                    $('[name="billingAddress.city"]').val('');  
                                    $('[name="billingAddress.postalCode"]').val('');
                            }
                            else
                            {
                                
                                CCRZ.cartCheckoutView.model.attributes.poType =  CCRZ.cartCheckoutView.model.attributes.initpoType;
                                CCRZ.cartCheckoutView.model.attributes.thirdPartyPaymentChcked = false;
                                if(CCRZ.cartCheckoutView.model.attributes.InitdisplayPaymentMethods.includes("po"))
                                {
                                    CCRZ.cartCheckoutView.model.attributes.displayPaymentMethods = 'po,cc';
                                }
                                else
                                {
                                    CCRZ.cartCheckoutView.model.attributes.displayPaymentMethods = 'cc';
                                }

                                var firstName = $('#firstNameField').val();
                                var lastName = $('#lastNameField').val();
                                var phone = $('#homePhoneField').val();
                                var email = $('#emailField').val();
                                
                                CCRZ.cartCheckoutView.model.attributes.contactDetails.FirstName = firstName;
                                CCRZ.cartCheckoutView.model.attributes.contactDetails.LastName = lastName;
                                CCRZ.cartCheckoutView.model.attributes.contactDetails.Phone = phone;
                                CCRZ.cartCheckoutView.model.attributes.contactDetails.Email = email;


                                this.render();
                                $(".cmi-po").prop("checked",false);
                                CCRZ.cartCheckoutView.model.attributes.selectedPaymentMethod = '';
                                $("#shippingAddressSelector").css("display", "block");
                            
                                jQuery("input.billingField").attr("readonly", false);
                                $('select.billingField').attr('disabled', false);
                                $('.billingstate').attr('disabled', false);
                                $('.billingstate').attr('readonly', false);
                                
                            }
                            populatedistributorcode();
                            
                            
                            
                        }
                        
                        addListView.BMSAccountSelect = function(event)
                        {
                            selectedBMSId = event.target.dataset.id;
                            /*
                            if(CCRZ.cartCheckoutView.model.attributes.BMSResultData != undefined)
                            {
                                
                                
                                for(var key in CCRZ.cartCheckoutView.model.attributes.BMSResultData)
                                {
                                    if(key == event.target.dataset.id)
                                    {
                                        CCRZ.cartCheckoutView.model.attributes.selectedBMSResult = CCRZ.cartCheckoutView.model.attributes.BMSResultData[key];
                                        $("#BMSAccountSearchText").val(CCRZ.cartCheckoutView.model.attributes.BMSResultData[key].CustomerName);
                                        //$("#BMSAccountIAMCustomerCode").val(CCRZ.cartCheckoutView.model.attributes.BMSResultData[key].IAMCustomerCode);
                                    }
                                }
                            }
                            */
                        }
                        
                        addListView.closepopupForCreditLimitCheck = function(event)
                        {
                            //$("#BMS-Account-Model").modal('hide');
                            $("#BMS-Account-Model").css("display", "none");
                            CCRZ.subsc.UserAccountDataAction.getCleasePaymentMethod( function(response)
                            {
                                location.reload();
                            });
                            
                        }
                        addListView.selectAndCloseSearchBMSPopUp = function(event)
                        {
                        
                            
                            if(selectedBMSId != '')
                            {
                                if(CCRZ.cartCheckoutView.model.attributes.BMSResultData != undefined)
                                {
                                    $('#ThirdPartyMsg').css("display", "none");
                                    $('#checkboxDiv2').css('border-color', 'none');
                                    $('#checkboxDiv2').css('border-style', 'none');
                                    
                                    for(var key in CCRZ.cartCheckoutView.model.attributes.BMSResultData)
                                    {
                                        if(key == selectedBMSId)
                                        {
                                            CCRZ.cartCheckoutView.model.attributes.selectedBMSResult = CCRZ.cartCheckoutView.model.attributes.BMSResultData[key];
                                            $("#BMSAccountSearchText").val(_.unescape(CCRZ.cartCheckoutView.model.attributes.BMSResultData[key].CustomerName));
                                            $("#BMSAccountIAMCustomerCode").val(_.unescape(CCRZ.cartCheckoutView.model.attributes.BMSResultData[key].IAMCustomerCode));
                                            //CCRZ.cartCheckoutView.model.attributes.searchBMSString = CCRZ.cartCheckoutView.model.attributes.BMSResultData[key].CustomerName;
                                        }
                                    }
                            }
                            }
                            console.log(event);
                            if(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult != undefined)
                            {
                                $("#shippingAddressSelector").css("display", "none");
                                
                                jQuery("input.billingField").attr("readonly", true);
                                $('select.billingField').attr('disabled', true);
                                $('.billingstate').attr('disabled', true);
                                $('.billingstate').attr('readonly', true);
                                
                                $(".billingAddress1").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.LocationAddressline1);
                                $(".billingAddress2").val('');
                                $(".billingAddress3").val('');
                                $(".billingCity").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.City);
                                $(".billingstate").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.State);
                                $(".billingcountry").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.Country);
                                $(".billingPostalCode").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.Postalcode1);
                                //$(".billingstatecode").val(CCRZ.cartCheckoutView.model.attributes.selectedBMSResult.State);
                                $("#BMS-Search-Model").modal('hide');
                                CCRZ.cartCheckoutView.model.attributes.selectedPaymentMethod = 'po';
                                isUpdateCartPayRequired = true;
                            }
                        }
                        
                        
                        
                        addListView.getBMSInfoSearch = function(event)
                        {
                            selectedBMSId = '';
                            CCRZ.cartCheckoutView.model.attributes.selectedBMSResult = undefined;
                            var searchText = $("#BMSAccountSearchText").val();
                            var distributorcode =$( "#distcodeselid option:selected" ).text();
                            console.log('distributorcode'+distributorcode);
                            if(searchText.length > 2)
                            {
                            
                                
                                $("#BMSSearchResultTableBody").children().remove();
                                CCRZ.cartCheckoutView.model.attributes.BMSResultData = '';
                                CCRZ.subsc.UserAccountDataAction.getBMSSearchinfo(searchText,distributorcode,function(response)
                                {
                                     $("#BMSSearchResultTableBody").children().remove();
                                     console.log(response);
                                     debugger;
                                     
                                    if(response !=null && response.success && response.data != undefined && response.data.result != undefined && response.data.resultLength != undefined && response.data.resultLength > 0)
                                    {
                                        CCRZ.cartCheckoutView.model.attributes.BMSResultData = response.data.result;
                                        for(var key in response.data.result)
                                        {
                                            console.log(key);
                                            $("#BMSSearchResultTableBody").append('<tr><td><div  ><input class="BMSAccountSelect" type="radio" name="optradio" data-id="'+key+'"></div></td><td class="cc_td_name select_contact" data-id="'+key+'" data-name="test acc">'+response.data.result[key].CustomerCode+'</td><td>'+response.data.result[key].CustomerName+'</td><td>'+response.data.result[key].City+'</td><td>'+response.data.result[key].State+'</td></tr>');
                                        }
                                        $("#BMS-Search-Model").modal('show');
                                    }
                                    else
                                    {
                                        
                                        $("#BMS-Search-NoResult").modal('show');
                                    }
                                    
                                    
                                });
                            }
                            else
                            {
                                $("#BMS-Search-Issue").modal('show');
                            }
                        }
                        
                        addListView.copyBillingAddress2 = function(event)
                        {
                            console.log(event);
                            var objLink = $(event.target);
                            console.log(objLink);
                            console.log(objLink[0].checked);
                            if(objLink[0].checked)
                            {
                                console.log('Inside copyBillingAddress  ');
                        
                                var billData = form2js('billingAddressForm', '.', false, function(node) {}, false);
                                
                                
                                console.log('===billData.billingAddress.stateCode==='+billData.billingAddress.stateCode);
                                console.log('===billData.billingAddress.state==='+billData.billingAddress.state);
                                console.log('===billData.billingAddress.countryCode==='+billData.billingAddress.countryCode);
                                 
                                var billingCountryCode = $('[name="billingAddress.countryCode"]').val();
                                var billingState = $('.billingstate').val();
                                var billingCity=$('.billingCity').val();
                                var billingAddress1=$('.billingAddress1').val();
                                var postalCode=$('.billingPostalCode').val();
                                var billingAddress2=$('.billingAddress2').val();
                                var billingAddress3=$('.billingAddress3').val();
                                
                                console.log('===billingCountryCode=='+billingCountryCode);
                                console.log('===billingState=='+billingState);
                                console.log('===billingCity=='+billingCity);
                                console.log('===billingAddress1=='+billingAddress1);
                                console.log('===postalCode=='+postalCode);
                                console.log('===billingAddress2=='+billingAddress2);
                                console.log('===billingAddress3=='+billingAddress3);
                                billData.billingAddress.countryCode=billingCountryCode;
                                
                                //following steps done to be used in processUserInfoCustom 
                                if(!_.isUndefined(billingCountryCode)){
                                    CCRZ.cartCheckoutModel.attributes.shippingAddress.countryCode = billingCountryCode;
                                    
                                    if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                     {
                                     CCRZ.cartCheckoutModel.attributes.billingAddress.countryCode = billingCountryCode;
                                     //CCRZ.cartCheckoutModel.attributes.billingAddress.city = billingCity;
                                     //CCRZ.cartCheckoutModel.attributes.billingAddress.BillingCountryCode = billingCountryCode;
                                     }
                                }
                                else{
                                //tbd raise error
                                console.log('====RAISE ERROE===');
                                }
                                if(!_.isUndefined(billingState)){
                                    CCRZ.cartCheckoutModel.attributes.shippingAddress.stateCode = billingState;
                                    
                                    if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                    CCRZ.cartCheckoutModel.attributes.billingAddress.stateCode=billingState;
                                    //CCRZ.cartCheckoutModel.attributes.billingAddress.BillingStateCode=billingState;
                                    }
                                }
                                else{
                                 //tbd raise error
                                 console.log('====RAISE ERROE===');
                                }
                                if(!_.isUndefined(billingAddress1))
                                 {
                                     if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                        CCRZ.cartCheckoutModel.attributes.billingAddress.address1=billingAddress1;
                                    }
                                 }
                                 if(!_.isUndefined(postalCode))
                                 {
                                     if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                        CCRZ.cartCheckoutModel.attributes.billingAddress.postalCode=postalCode;
                                    }
                                 }
                                 if(!_.isUndefined(billingCity))
                                 {
                                     if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                         CCRZ.cartCheckoutModel.attributes.billingAddress.city = billingCity;
                                    }
                                 }
                                 if(!_.isUndefined(billingAddress2))
                                 {
                                     if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                         CCRZ.cartCheckoutModel.attributes.billingAddress.address2= billingAddress2;
                                    }
                                 }
                                  if(!_.isUndefined(billingAddress3))
                                 {
                                     if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                         CCRZ.cartCheckoutModel.attributes.billingAddress.address3 = billingAddress3;
                                    }
                                 }
                                
                                console.log('Shipping - Country Code-'+CCRZ.cartCheckoutModel.attributes.shippingAddress.countryCode);
                                console.log('Shipping - stateCode-'+CCRZ.cartCheckoutModel.attributes.shippingAddress.stateCode);
                                addListView.applyAddressData('shipping', billData.billingAddress);
                                
                                addListView.renderShipStates('','US');
                                this.renderShipStates(billingState, billingCountryCode);
                                this.processReadOnlyLogic();
                            }
                        }
                        
                        addListView.copyBillingAddress = function(event) {
                       
                            console.log('Inside copyBillingAddress  ');
                        
                            var billData = form2js('billingAddressForm', '.', false, function(node) {}, false);
                            
                            
                            console.log('===billData.billingAddress.stateCode==='+billData.billingAddress.stateCode);
                            console.log('===billData.billingAddress.state==='+billData.billingAddress.state);
                            console.log('===billData.billingAddress.countryCode==='+billData.billingAddress.countryCode);
                             
                            var billingCountryCode = $('[name="billingAddress.countryCode"]').val();
                            var billingState = $('.billingstate').val();
                            console.log('===billingCountryCode=='+billingCountryCode);
                            console.log('===billingState=='+billingState);
                            
                            billData.billingAddress.countryCode=billingCountryCode;
                            
                            //following steps done to be used in processUserInfoCustom 
                            if(!_.isUndefined(billingCountryCode)){
                                CCRZ.cartCheckoutModel.attributes.shippingAddress.countryCode = billingCountryCode;
                            }
                            else{
                            //tbd raise error
                            console.log('====RAISE ERROE===');
                            }
                            if(!_.isUndefined(billingState)){
                                CCRZ.cartCheckoutModel.attributes.shippingAddress.stateCode = billingState;
                            }
                            else{
                             //tbd raise error
                             console.log('====RAISE ERROE===');
                            }
                            
                            
                            console.log('Shipping - Country Code-'+CCRZ.cartCheckoutModel.attributes.shippingAddress.countryCode);
                            console.log('Shipping - stateCode-'+CCRZ.cartCheckoutModel.attributes.shippingAddress.stateCode);
                            addListView.applyAddressData('shipping', billData.billingAddress);
                            
                            
                            this.renderShipStates(billingState, billingCountryCode);
                            this.processReadOnlyLogic();
                            
                            return false;                      
                            
                        }
                        
                        
                        addListView.processAddressSelectionCustom = function(event) {
                             var obj = $(event.target);
                             var id = obj.data("id");
                             if (obj.hasClass('billingField')) {
                              var selectedEntry = this.addressBook.billingAddresses.get(id);
                              CCRZ.cartCheckoutModel.attributes.billingAddress = selectedEntry.toJSON();
                            
                            console.log('===selectedEntry.attributes.stateCode==='+selectedEntry.attributes.stateCode);
                            console.log('===selectedEntry.attributes.state==='+selectedEntry.attributes.state);
                            console.log('===selectedEntry.attributes.countryCode==='+selectedEntry.attributes.countryCode);
                              
                              this.applyAddressData('billing', selectedEntry.attributes);
                              
                              
                              if (!selectedEntry.attributes.stateCode)
                               this.renderBillStates(selectedEntry.attributes.state, selectedEntry.attributes.countryCode);
                              else
                               this.renderBillStates(selectedEntry.attributes.stateCode, selectedEntry.attributes.countryCode);
                             }
                             else {
                              var selectedEntry = this.addressBook.shippingAddresses.get(id);
                              CCRZ.cartCheckoutModel.attributes.shippingAddress = selectedEntry.toJSON();
                              this.applyAddressData('shipping', selectedEntry.attributes);
                              if (!selectedEntry.attributes.stateCode)
                               this.renderShipStates(selectedEntry.attributes.state, selectedEntry.attributes.countryCode);
                              else
                               this.renderShipStates(selectedEntry.attributes.stateCode, selectedEntry.attributes.countryCode);
                             }
                             
                             this.processReadOnlyLogic();
                            }
                            
                            
                        addListView.processUserInfoCustom = function() {
                        
                                
                                  
                                 if (this.validateInfo()) {
                                 
                                  var formData = form2js('mainform', '.', false, function(node) {}, false);
                                  CCRZ.cartCheckoutModel.set(formData);
                                  
                                 
                                  if($("#ccEmailForm").length>0){
                                   var ccFormData = form2js('ccEmailForm', '.', false, function(node) {}, false);
                                   CCRZ.cartCheckoutModel.set(ccFormData);
                                  }
                                  
                                 
                                   var billData = form2js('billingAddressForm', '.', false, function(node) {}, false);
                                   billData.billingAddress.country = $( ".billingcountry option:selected" ).text();
                                  
                                   billData.billingAddress.countryCode = $('[name="billingAddress.countryCode"]').val();
                                   //state info
                                   billData.billingAddress.state = $( ".billingstate option:selected" ).text();
                                   var billStateCode = $('[name="billingAddress.stateCode"]').val();
                                   billData.billingAddress.stateCode = billStateCode;
                                   console.log('BillingState>>>>>>>3'+billData.billingAddress.state);
                                   if(billData.billingAddress.state === undefined) {
                                       billData.billingAddress.state=$(".billingstate").val();
                                   }
                                     console.log('==Before ==billData.billingAddress.stateCode==='+billData.billingAddress.stateCode);
                                   if(billData.billingAddress.stateCode === undefined) {
                                      billData.billingAddress.stateCode=$(".billingstate").val(); 
                                   }
                                      console.log('==After ==billData.billingAddress.stateCode==='+billData.billingAddress.stateCode);
                                      console.log('====billStateCode111==='+billStateCode);
                                     
                                   console.log('====billingstate==='+$(".billingstate").val());
                                     console.log('====shippingstate==='+$(".shippingstate").val());
                                      console.log(billData);
                                    console.log('====AFTER billData in processUserInfoCustom ====');
                                    billData.billingAddress.isbillingaddrcleansed = isbillingaddrcleansed;
                                 console.log('====billData.billingAddress.isbillingaddrcleansed ===='+billData.billingAddress.isbillingaddrcleansed);
                                   CCRZ.cartCheckoutModel.set(billData);
                                   
                                   
                                   
                                   var shipData = form2js('shippingAddressForm', '.', false, function(node) {}, false);
                                   //country info
                                   shipData.shippingAddress.country = $( ".shippingcountry option:selected" ).text();
                                   shipData.shippingAddress.countryCode = $('[name="shippingAddress.countryCode"]').val();
                                   //state info
                                   shipData.shippingAddress.state = $( ".shippingstate option:selected" ).text();
                                   var shipStateCode = $('[name="shippingAddress.stateCode"]').val();
                                   console.log('====shipStateCode==='+shipStateCode);
                                   shipData.shippingAddress.stateCode = shipStateCode;
                                   if(shipData.shippingAddress.state === undefined) {
                                       shipData.shippingAddress.state=$(".shippingstate").val();
                                   }
                                   if(shipData.shippingAddress.stateCode === undefined) {
                                      shipData.shippingAddress.stateCode=$(".shippingstate").val(); 
                                   }
                                   console.log('====shipData.shippingAddress.state==='+shipData.shippingAddress.state);
                                     console.log('====shipData.shippingAddress.stateCode==='+shipData.shippingAddress.stateCode);
                                   //do not delete for now
                                   //shipData.shippingAddress.countryCode = CCRZ.cartCheckoutModel.attributes.shippingAddress.countryCode;
                                   //shipData.shippingAddress.stateCode = CCRZ.cartCheckoutModel.attributes.shippingAddress.stateCode;
                                   //console.log('====AFTER shipData in processUserInfoCustom with complete====');
                                   //console.log(CCRZ.cartCheckoutModel.attributes.shippingAddress);
                                   shipData.shippingAddress.isshippingaddrcleansed= isshippingaddrcleansed;
                                     console.log('shipData.shippingAddress.isshippingaddrcleansed'+shipData.shippingAddress.isshippingaddrcleansed);
                                   CCRZ.cartCheckoutModel.set(shipData);
                                   this.initAddresses();
                                  //}
                                  console.log("before tab move");
                                  CCRZ.cartCheckoutView.slideRight();
                                  console.log("after tab move");
                                 }else{
                                  window.scrollTo(0,0);
                                 }
                                }
                                
                                addListView.saveCleansedAddressBilling = function() {
                                    
                                    var selectedAddress1= $("#EDQBillingAddr1").text();
                                    var selectedAddress2=$("#EDQBillingAddr2").text();
                                    var selectedAddress3=$("#EDQBillingAddr3").text();
                                    var selectedCity= $("#EDQBillingCity").text();
                                    var selectedState= $("#EDQBillingState").text();
                                    var selectedCountry= $("#EDQBillingCountry").text();
                                    var selectedPostalCode= $("#EDQBillingPostalCode").text()
                                   
                                    console.log('selectedState>>>'+selectedState);
                                    //setting selected cleansed address in billing address
                                    $('[name="billingAddress.address1"]').val(selectedAddress1);  
                                    $('[name="billingAddress.address2"]').val(selectedAddress2);  
                                    $('[name="billingAddress.address3"]').val(selectedAddress3);  
                                    $('[name="billingAddress.city"]').val(selectedCity);  
                                    $('[name="billingAddress.postalCode"]').val(selectedPostalCode);
                                    $('.billingstate').val(selectedState);
                                    $('[name="billingAddress.country"]').val(selectedCountry);
                                    console.log('NewselectedState>>>'+$('.billingstate').val());
                                    isbillingaddrcleansed=true;
                                     console.log('isbillingaddrcleansed>>>'+isbillingaddrcleansed);
                                    
                                }
                                addListView.saveCleansedAddressShipping = function() {
                                    var selectedAddress1= $("#EDQShippingAddr1").text();
                                    var selectedAddress2=$("#EDQShippingAddr2").text();
                                    var selectedAddress3=$("#EDQShippingAddr3").text();
                                    var selectedCity= $("#EDQShippingCity").text();
                                    var selectedState= $("#EDQShippingState").text();
                                    var selectedCountry= $("#EDQShippingCountry").text();
                                    var selectedPostalCode= $("#EDQShippingPostalCode").text()
                                   
                                    console.log('selectedState>>>'+selectedState);
                                    //setting selected cleansed address in shipping address
                                    
                                    $('[name="shippingAddress.country"]').val(selectedCountry);
                                    $('.shippingstate').val(selectedState);
                                    $('[name="shippingAddress.address1"]').val(selectedAddress1);  
                                    $('[name="shippingAddress.address2"]').val(selectedAddress2);  
                                    $('[name="shippingAddress.address3"]').val(selectedAddress3);  
                                    $('[name="shippingAddress.city"]').val(selectedCity);  
                                    $('[name="shippingAddress.postalCode"]').val(selectedPostalCode);
                                    isshippingaddrcleansed=true;
                                    
                                }
                                
                                addListView.saveCleansedAddressShippingPO = function() {
                                    var selectedAddress1= $("#EDQShippingAddr1PO").text();
                                    var selectedAddress2=$("#EDQShippingAddr2PO").text();
                                    var selectedAddress3=$("#EDQShippingAddr3PO").text();
                                    var selectedCity= $("#EDQShippingCityPO").text();
                                    var selectedState= $("#EDQShippingStatePO").text();
                                    var selectedCountry= $("#EDQShippingCountryPO").text();
                                    var selectedPostalCode= $("#EDQShippingPostalCodePO").text()
                                   
                                    console.log('selectedState>>>'+selectedState);
                                    //setting selected cleansed address in shipping address
                                    
                                    $('[name="shippingAddress.country"]').val(selectedCountry);
                                    $('[name="shippingAddress.stateCode"]').val(selectedState); 
                                    $('[name="shippingAddress.address1"]').val(selectedAddress1);  
                                    $('[name="shippingAddress.address2"]').val(selectedAddress2);  
                                    $('[name="shippingAddress.address3"]').val(selectedAddress3);  
                                    $('[name="shippingAddress.city"]').val(selectedCity);  
                                    $('[name="shippingAddress.postalCode"]').val(selectedPostalCode);
                                    isshippingaddrcleansed=true;
                                    
                                }
                                
                                
                                
                                addListView.saveShippingAddressBackToOldPO = function() {
                                    var selectedAddress1= $("#ShippingAddr1PO").text();
                                    var selectedAddress2=$("#ShippingAddr2PO").text();
                                    var selectedAddress3=$("#ShippingAddr3PO").text();
                                    var selectedCity= $("#ShippingCityPO").text();
                                    var selectedState= $("#ShippingStateCodePO").text();
                                    var selectedCountry= $("#ShippingCountryPO").text();
                                    var selectedPostalCode= $("#ShippingPostalCodePO").text()
                                   
                                    console.log('selectedState>>>'+selectedState);
                                    //setting selected cleansed address in shipping address
                                    
                                    $('[name="shippingAddress.country"]').val(selectedCountry);
                                    $('[name="shippingAddress.stateCode"]').val(selectedState); 
                                    $('[name="shippingAddress.address1"]').val(selectedAddress1);  
                                    $('[name="shippingAddress.address2"]').val(selectedAddress2);  
                                    $('[name="shippingAddress.address3"]').val(selectedAddress3);  
                                    $('[name="shippingAddress.city"]').val(selectedCity);  
                                    $('[name="shippingAddress.postalCode"]').val(selectedPostalCode);
                                    isshippingaddrcleansed=true;
                                    
                                }
                                
                                addListView.saveBillingAddressBackToOld = function() {
                                    var selectedAddress1= $("#BillingAddr1").text();
                                    var selectedAddress2=$("#BillingAddr2").text();
                                    var selectedAddress3=$("#BillingAddr3").text();
                                    var selectedCity= $("#BillingCity").text();
                                    var selectedState= $("#BillingStateCode").text();
                                    var selectedCountry= $("#BillingCountryCode").text();
                                    var selectedPostalCode= $("#BillingPostalCode").text()
                                   
                                    console.log('selectedState>>>'+selectedState);
                                    //setting selected cleansed address in billing address
                                    $('[name="billingAddress.address1"]').val(selectedAddress1);  
                                    $('[name="billingAddress.address2"]').val(selectedAddress2);  
                                    $('[name="billingAddress.address3"]').val(selectedAddress3);  
                                    $('[name="billingAddress.city"]').val(selectedCity);  
                                    $('[name="billingAddress.postalCode"]').val(selectedPostalCode);
                                    $('.billingstate').val(selectedState);
                                    $('[name="billingAddress.country"]').val(selectedCountry);
                                    console.log('NewselectedState>>>'+$('.billingstate').val());
                                    isbillingaddrcleansed=true;
                                    
                                }
                                addListView.saveShippingAddressBackToOld = function() {
                                    var selectedAddress1= $("#ShippingAddr1").val();
                                    var selectedAddress2=$("#ShippingAddr2").val();
                                    var selectedAddress3=$("#ShippingAddr3").val();
                                    var selectedCity= $("#ShippingCity").val();
                                    var selectedState= $("#ShippingStateCode").val();
                                    var selectedCountry= $("#ShippingCountryCode").val();
                                    var selectedPostalCode= $("#ShippingPostalCode").val()
                                   
                                    console.log('selectedState>>>'+selectedState);
                                    //setting selected cleansed address in shipping address
                                    
                                    $('[name="shippingAddress.country"]').val(selectedCountry);
                                    $('.shippingstate').val(selectedState); 
                                    $('[name="shippingAddress.address1"]').val(selectedAddress1);  
                                    $('[name="shippingAddress.address2"]').val(selectedAddress2);  
                                    $('[name="shippingAddress.address3"]').val(selectedAddress3);  
                                    $('[name="shippingAddress.city"]').val(selectedCity);  
                                    $('[name="shippingAddress.postalCode"]').val(selectedPostalCode);
                                    isshippingaddrcleansed=true;
                                    
                                }
                                addListView.checkCountryState = function() {
                                   console.log('in country method>>>>>');
                                    
                                }
                                $('.billingcountry').on('change', function() {
                                window.$Label = window.$Label || {};
                                $Label.OSM_CountryListForUserInfo = '{!($Label.OSM_CountryListForUserInfo)}';
                                
                                    if($Label.OSM_CountryListForUserInfo.includes(this.value))
                                    {
                                         $('#billingstatelabel').css("display", "inherit");
                                         console.log('stateLabel1'+this.value );
                                        
                                    }  
                                    else
                                    {
                                         $('#billingstatelabel').css("display", "none");
                                         console.log('stateLabel2'+this.value );
                                    }  
                                });
                                $('.shippingcountry').on('change', function() {
                                window.$Label = window.$Label || {};
                                $Label.OSM_CountryListForUserInfo = '{!($Label.OSM_CountryListForUserInfo)}';
                                
                                    if($Label.OSM_CountryListForUserInfo.includes(this.value))
                                    {
                                         $('#shippingstatelabel').css("display", "inherit");
                                         console.log('stateLabel1'+this.value );
                                    }  
                                    else
                                    {
                                         $('#shippingstatelabel').css("display", "none");
                                         console.log('stateLabel2'+this.value );
                                    }  
                                });
                    addListView.events['onload'] = 'blankAddresses';     
                    addListView.events['click .cmi-cc'] = 'blankAddresses'; 
                    addListView.events['click .cmi-po'] = 'blankAddresses'; 
                    addListView.events['click .cc_select_address'] = 'processReadOnlyLogic'; 
                    addListView.events['click .cc_process_user_info'] = 'updatePaymentMethod'; 
                    addListView.events['click .cmi_copy_address'] = 'copyBillingAddress'; 
                    addListView.events['click .cmi_copy_address2'] = 'copyBillingAddress2'; 
                    addListView.events['click .thirpatyPaymentchwckbox'] = 'thirpatyPaymentchwckbox'; 
                    addListView.events['click .osm_selectAddress'] = 'processAddressSelectionCustom'; 
                    addListView.events['click .osm_processUserInfo'] = 'processUserInfoCustom';
                    addListView.events['click .osm_processEDQModel'] = 'updateEDQAddress';                  
                    addListView.events['click .osm_processEDQModelPO'] = 'updateEDQAddressPO';                  
                    addListView.events['click .getBMSInfoSearch'] = 'getBMSInfoSearch';                  
                    addListView.events['click .BMSAccountSelect'] = 'BMSAccountSelect';                  
                    addListView.events['click .selectAndCloseSearchBMSPopUp'] = 'selectAndCloseSearchBMSPopUp';                  
                    addListView.events['click .closepopupForCreditLimitCheck'] = 'closepopupForCreditLimitCheck';                  
                    addListView.events['click .osm_SaveCleansedAdd'] = 'saveCleansedAddressBilling'; 
                    addListView.events['click .osm_SaveCleansedAddShip'] = 'saveCleansedAddressShipping'; 
                    addListView.events['click .osm_SaveCleansedAddShipPO'] = 'saveCleansedAddressShippingPO'; 
                    addListView.events['click .osm_SaveBillingAddBackToOld']='saveBillingAddressBackToOld';
                    addListView.events['click .osm_SaveShippingAddBackToOld']='saveShippingAddressBackToOld';
                    addListView.events['click .osm_SaveShippingAddBackToOldPO']='saveShippingAddressBackToOldPO';
                    addListView.events['onchange #country']='checkCountryState';
                    
                    
                    
                    
                                                                
                    addListView.delegateEvents();  

                    if(null!= $('.billingcountry'))
                    {
                        //$('.billingcountry').val('US');
                        $('.billingcountry').attr('disabled', true);
                    }
                    if(null != $('.shippingcountry'))
                    {
                       //$('.shippingcountry').val('US');
                        $('.shippingcountry').attr('disabled', true);       
                    }
                    
                    
                        

                });
            
            
            
      
            CCRZ.pubSub.on('view:cartCheckoutView:refresh',function(cartCheckoutView){
                
             console.log("===CCRZ.pubSub.on refresh of cartCheckoutView 1===="+isPaymentMethodcalledFromRemote);
             cartCheckoutViewHere = cartCheckoutView;
                isbillingaddrcleansed=false;
                isshippingaddrcleansed=false;
             console.log("before call");
                CCRZ.subsc.UserAccountDataAction.getPaymentType(function(response)
                {
                            console.log("Payment Response got from controller 1");
                            console.log(response);
                            responseFromCtrl = response;
                            //need to fetch the data only first time
                            if(!isPaymentMethodcalledFromRemote)
                            {
                                if(responseFromCtrl!=undefined){
                                
                                 if(responseFromCtrl.success)
                                    {
                                         console.log("responseFromCtrl get cartSelectedPaymentMethod:"+responseFromCtrl.data.cartSelectedPaymentMethod);
                                        
                                        if(responseFromCtrl.data != undefined)
                                        {
                                          if(responseFromCtrl.data.POfor != undefined)
                                          {
                                            poType = responseFromCtrl.data.POfor;
                                            cartCheckoutView.model.attributes.poType = poType;
                                            cartCheckoutView.model.attributes.initpoType = poType;
                                            if(responseFromCtrl.data.OneBMSCreditValue != undefined)
                                            {
                                                cartCheckoutView.model.attributes.OneBMSCreditValue = responseFromCtrl.data.OneBMSCreditValue;
                                            }
                                          }
                                          if(responseFromCtrl.data.OneBMSCreditLimitMsg != undefined)
                                          {
                                            cartCheckoutView.model.attributes.OneBMSCreditLimitMsg = responseFromCtrl.data.OneBMSCreditLimitMsg;
                                            creditMsj = responseFromCtrl.data.OneBMSCreditLimitMsg;
                                          }
                                          
                                          
                                          cartCheckoutView.model.attributes.paymentOptionError = responseFromCtrl.data.paymentOptionError;
                                          if(responseFromCtrl.data.thirdPartyPayment != undefined && responseFromCtrl.data.IsGOMSAccount == undefined)
                                          {
                                            cartCheckoutView.model.attributes.thirdPartyPayment = responseFromCtrl.data.thirdPartyPayment;
                                            cartCheckoutView.model.attributes.thirdPartyPaymentChcked = false;
                                            
                                            
                                          }
                                          
                                          if(responseFromCtrl.data.ShowDISTMsg != undefined)
                                          {
                                            cartCheckoutView.model.attributes.ShowDISTMsg = responseFromCtrl.data.ShowDISTMsg;
                                            
                                          }
                                          if(responseFromCtrl.data.BoltNotActiveMsg != undefined)
                                          {
                                            cartCheckoutView.model.attributes.BoltNotActiveMsg = responseFromCtrl.data.BoltNotActiveMsg;
                                          }
                                          else
                                          {
                                            cartCheckoutView.model.attributes.BoltNotActiveMsg = false;
                                          }
                                          if(responseFromCtrl.data.IsOneBMSFailure != undefined)
                                          {
                                            cartCheckoutView.model.attributes.isOneBMSFailure = responseFromCtrl.data.IsOneBMSFailure;
                                            if(responseFromCtrl.data.IsOneBMSFailure)
                                            {
                                                cartCheckoutView.model.attributes.OneBMSCreditLimitMsg = false;
                                            }
                                         
                                          }
                                          if(responseFromCtrl.data.cartSelectedPaymentMethod != undefined)
                                            {
                                             cartCheckoutView.model.attributes.selectedPaymentMethod = responseFromCtrl.data.cartSelectedPaymentMethod;
                                             
                                            } 
                                            if(responseFromCtrl.data.IsNotFluidWatch != undefined)
                                            {
                                             cartCheckoutView.model.attributes.IsNotFluidWatch = responseFromCtrl.data.IsNotFluidWatch;
                                             
                                            }
                                            if(responseFromCtrl.data.IsFluidWatch != undefined)
                                            {
                                             cartCheckoutView.model.attributes.IsFluidWatch = responseFromCtrl.data.IsFluidWatch;
                                             isFWPrd = responseFromCtrl.data.IsFluidWatch;
                                            }
                                             
                                            
                                            
                                             if(responseFromCtrl.data.HQDistributorCode != undefined)
                                            {
                                             cartCheckoutView.model.attributes.HQDistributorCode = responseFromCtrl.data.HQDistributorCode;
                                             HQDistributorCode=cartCheckoutView.model.attributes.HQDistributorCode;
                                            }  
                                            
                                            
                                            
                                
                                            
                                            if(responseFromCtrl.data.HQDistributorCode != undefined)
                                            {
                                             cartCheckoutView.model.attributes.HQDistributorCode = responseFromCtrl.data.HQDistributorCode;
                                             HQDistributorCode=cartCheckoutView.model.attributes.HQDistributorCode;
                                            }  
                                            
                                            console.log('====After checking the selected payment =====');
                                            console.log('===paymentmethod==='+responseFromCtrl.data.paymentMethod);
                                            if(responseFromCtrl.data.paymentMethod != undefined)
                                            {
                                               var displayCC = '';
                                               
                                                if(responseFromCtrl.data.paymentMethod.includes("cc") )
                                                {
                                                    cartCheckoutView.model.attributes.displayPaymentMethods = "cc";
                                                    cartCheckoutView.model.attributes.InitdisplayPaymentMethods = "cc";
                                                    displayCC = 'cc';
                                                }
                                                                                                                                        
                                                if(responseFromCtrl.data.paymentMethod.includes("po"))
                                                {
                                                                                                                                                       
                                                    cartCheckoutView.model.attributes.displayPaymentMethods = "po";
                                                    if(displayCC=='cc')
                                                     {
                                                        cartCheckoutView.model.attributes.displayPaymentMethods ='po,cc';
                                                        cartCheckoutView.model.attributes.InitdisplayPaymentMethods ='po,cc';
                                                     }
                                             
                                                }
                                               
                                            }
                                            if(responseFromCtrl.data.BillingStateCode != undefined)
                                            {
                                                cartCheckoutView.model.attributes.billingAddress.BillingStateCode=responseFromCtrl.data.BillingStateCode;
                                            }
                                            if(responseFromCtrl.data.BillingCountryCode != undefined)
                                            {
                                                cartCheckoutView.model.attributes.billingAddress.BillingCountryCode=responseFromCtrl.data.BillingCountryCode;
                                            }
                                            if(responseFromCtrl.data.ShippingCountryCode != undefined)
                                            {
                                                cartCheckoutView.model.attributes.shippingAddress.shippingStateCode=responseFromCtrl.data.ShippingCountryCode;
                                            }
                                            if(responseFromCtrl.data.ShippingCountryCode != undefined)
                                            {
                                                cartCheckoutView.model.attributes.shippingAddress.ShippingCountryCode=responseFromCtrl.data.ShippingCountryCode;
                                            }
                                            if(responseFromCtrl.data.IsGOMSAccount != undefined)
                                            {
                                                cartCheckoutView.model.attributes.IsGOMSAccount = true;
                                            }
                                            else
                                            {
                                                cartCheckoutView.model.attributes.IsGOMSAccount = false;
                                            }
                                            if(cartCheckoutView.model.attributes.selectedBMSResult)
                                            {
                                                cartCheckoutView.model.attributes.thirdPartyPaymentChcked = true;
                                                cartCheckoutView.model.attributes.searchBMSString = _.unescape(cartCheckoutView.model.attributes.selectedBMSResult.CustomerName);
                                                
                                                if(cartCheckoutView.model.attributes.InitdisplayPaymentMethods.includes("po"))
                                                {
                                                    cartCheckoutView.model.attributes.displayPaymentMethods = 'po';
                                                }
                                                else
                                                {
                                                    cartCheckoutView.model.attributes.displayPaymentMethods = '';
                                                }
                                            }
                                            
                                            if(cartCheckoutView.model.attributes.displayPaymentMethods != null && cartCheckoutView.model.attributes.displayPaymentMethods != ''){
                                                console.log('Ashish placedd');
                                                if(cartCheckoutView.model.attributes.displayPaymentMethods.includes("po") && !isFWPrd){
                                                    console.log('Ashish placedd >>>  po');
                                                    $('.cmi-po').prop("checked", true);
                                                    cartCheckoutViewHere.model.attributes.selectedPaymentMethod = 'po';
                                                }else{
                                                    console.log('Ashish placedd  >>>>  cc');
                                                    $('.cmi-cc').prop("checked", true);
                                                    cartCheckoutViewHere.model.attributes.selectedPaymentMethod = 'cc';
                                                }
                                            }
                                            
                                            
                                            // START - Juhi Changes : Sept 10 - Change User Info Details from User to Contact
                                            if(responseFromCtrl.data.contactDetails != undefined)
                                            {
                                                CCRZ.cartCheckoutModel.attributes.contactDetails = responseFromCtrl.data.contactDetails;
                                                
                                                var contactInfo = CCRZ.cartCheckoutModel.attributes.contactDetails;
                                        
                                               if(null != contactInfo)
                                                   {
                                                        $('#firstNameField').val(contactInfo.firstName);
                                                        $('#lastNameField').val(contactInfo.lastName);
                                                        $('#homePhoneField').val(contactInfo.phone);
                                                        $('#emailField').val(contactInfo.email); 
                                                       }
                                            }
                                            // END - Juhi Changes : Sept 10 - Change User Info Details from User to Contact
                                        }
                                          
                                    }
                                
                                    isPaymentMethodcalledFromRemote = true;
                                }
                            
                                
                                if(setUpFirstTime){
                                //call logic to get the addresses from CC model
                                //this is not called if user calls back button
                                setUpFirstTimeData();
                                }
                                
                                updateCCModelBasedOnSelectedPaymentType('pageload');

                                // Added for MAR-1265
                                var billData = form2js('billingAddressForm', '.', false, function(node) {}, false);                                 
                                var billingCountryCode = $('[name="billingAddress.countryCode"]').val();
                                var billingState = $('.billingstate').val();
                                var billingCity=$('.billingCity').val();
                                var billingAddress1=$('.billingAddress1').val();
                                var postalCode=$('.billingPostalCode').val();
                                var billingAddress2=$('.billingAddress2').val();
                                var billingAddress3=$('.billingAddress3').val();
                                
                                console.log('===billingCountryCode=='+billingCountryCode);
                                console.log('===billingState=='+billingState);
                                console.log('===billingCity=='+billingCity);
                                console.log('===billingAddress1=='+billingAddress1);
                                console.log('===postalCode=='+postalCode);
                                console.log('===billingAddress2=='+billingAddress2);
                                console.log('===billingAddress3=='+billingAddress3);
                                billData.billingAddress.countryCode=billingCountryCode;
                                
                                //following steps done to be used in processUserInfoCustom 
                                if(!_.isUndefined(billingCountryCode)){
                                    CCRZ.cartCheckoutModel.attributes.shippingAddress.countryCode = billingCountryCode;
                                    
                                    if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false) {
                                        CCRZ.cartCheckoutModel.attributes.billingAddress.countryCode = billingCountryCode;
                                    }
                                }
                                else{
                                    console.log('====RAISE ERROE===');
                                }
                                if(!_.isUndefined(billingState)){
                                    CCRZ.cartCheckoutModel.attributes.shippingAddress.stateCode = billingState;                                    
                                    if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false){
                                        CCRZ.cartCheckoutModel.attributes.billingAddress.stateCode=billingState;
                                    }
                                }
                                else{
                                 console.log('====RAISE ERROE===');
                                }
                                if(!_.isUndefined(billingAddress1)) {
                                     if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                        CCRZ.cartCheckoutModel.attributes.billingAddress.address1=billingAddress1;
                                    }
                                 }
                                 if(!_.isUndefined(postalCode))
                                 {
                                     if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                        CCRZ.cartCheckoutModel.attributes.billingAddress.postalCode=postalCode;
                                    }
                                 }
                                 if(!_.isUndefined(billingCity))
                                 {
                                     if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                         CCRZ.cartCheckoutModel.attributes.billingAddress.city = billingCity;
                                    }
                                 }
                                 if(!_.isUndefined(billingAddress2))
                                 {
                                     if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                         CCRZ.cartCheckoutModel.attributes.billingAddress.address2= billingAddress2;
                                    }
                                 }
                                  if(!_.isUndefined(billingAddress3))
                                 {
                                     if(CCRZ.cartCheckoutModel.attributes.IsGOMSAccount!=false)
                                    {
                                         CCRZ.cartCheckoutModel.attributes.billingAddress.address3 = billingAddress3;
                                    }
                                 }
                                
                                console.log('Shipping - Country Code-'+CCRZ.cartCheckoutModel.attributes.shippingAddress.countryCode);
                                console.log('Shipping - stateCode-'+CCRZ.cartCheckoutModel.attributes.shippingAddress.stateCode);
                                addressView.applyAddressData('shipping', billData.billingAddress);
                                addressView.renderShipStates('','US');
                                $('.shippingstate').val(billingState);
                                
                                //this.renderShipStates(billingState, billingCountryCode);
                            }
                           
                });
                
                
                
                
            });
            
            
            function setUpFirstTimeData()
            {
                
                if(setUpFirstTime)
                {
                    //logic to get the addresses from CC model
                    if(cartCheckoutViewHere != undefined)
                    {
                      if(cartCheckoutViewHere.model.attributes != undefined)
                        {
                            console.log(cartCheckoutViewHere.model.attributes.billingAddress);
                            if(cartCheckoutViewHere.model.attributes.billingAddress != undefined)
                            {
                                if(cartCheckoutViewHere.model.attributes.billingAddress.addressList != undefined)
                                {
                                    for(var i = 0 ; i < cartCheckoutViewHere.model.attributes.billingAddress.addressList.length ; i++)
                                    {
                                       
                                       //if(cartCheckoutViewHere.model.attributes.billingAddress.addressList[i].BMSSite!=false || cartCheckoutViewHere.model.attributes.billingAddress.addressList[i].boltActive!=false)
                                        {
                                                BillingAddress.push(cartCheckoutViewHere.model.attributes.billingAddress.addressList[i]);
                                        }   
                                        
                                    }
                                }
                                    
                            }
                            
                            if(cartCheckoutViewHere.model.attributes.shippingAddress != undefined)
                            {
                                if(cartCheckoutViewHere.model.attributes.shippingAddress.addressList != undefined)
                                {
                                    for(var i = 0 ; i < cartCheckoutViewHere.model.attributes.shippingAddress.addressList.length ; i++)
                                    {
                                        masterShippingAddress.push(cartCheckoutViewHere.model.attributes.shippingAddress.addressList[i]);
                                    }
                                }
                            }
                                                                                              
                                                                                              
                        }
                    }
                    console.log("Check the first time Billing address list");
                    console.log(BillingAddress);
                    console.log(masterShippingAddress);
                    
                    
                    setUpFirstTime = false;
                   
                   
                                                                
                }
            }
            function populatedistributorcode(){
                 window.$Label = window.$Label || {};
                $Label.distributorcodes = '{!($Label.QSOL_ProductsSKUs)}';
                 var code ='{!($Label.OSM_BMSHQDistributors)}';
                 var distributorcode = code.split(',');
                console.log('distributorcode'+distributorcode);
                var defaultvalue ;
                     var select = $("<select class='form-control' id='distcodeselid'></select>");
                     for(var i=0;i<distributorcode.length;i++){
                            var option = $("<option class='form-control'></option>");
                            $(option).val(distributorcode[i]);
                            $(option).html(distributorcode[i]);
                            $(select).append(option);
                            defaultvalue=distributorcode[0];
                          
                      }
                  $(".distributorcodeselectid").append(select);
                console.log('distributorcode'+HQDistributorCode);
                 console.log('defaultvalue'+defaultvalue);
                if(HQDistributorCode==='02466'){
                       defaultvalue='Southern Plains BMS Instance';  
                 }else{
                       defaultvalue='US BMS Instance';
                 }
                if(defaultvalue!= undefined)
                $(".distributorcodeselectid select").val(defaultvalue);
            
            }


            function updateCCModelBasedOnSelectedPaymentType(eventname)
            {
                if(cartCheckoutViewHere.model.attributes.IsGOMSAccount==false)
                {
                $('.billingcountry').val('US');
                $('.billingcountry').attr('disabled', true);
                
                $('.shippingcountry').val('US');
                $('.shippingcountry').attr('disabled', true);
                } 
                else
                {
                    $('.billingcountry').val('');
                    $('.billingcountry').attr('disabled', false);
                    
                    $('.shippingcountry').val('');
                    $('.shippingcountry').attr('disabled', false);
                    console.log('=====Inelse block>>>>>>>>>>>');
                }
                console.log('=====Inside updateCCModelBasedOnSelectedPaymentType=== '+
                
                cartCheckoutViewHere.model.attributes.selectedPaymentMethod);                     
                     if({!getcheckUser}){
                                                                          
                         $(this).delay(1000).queue(function() {

                         $("#paymentMethodpopup").modal('show');
                             });                         
                          console.log('In if Tabrez');
                         
                     }
                     else{
                     }
                if(cartCheckoutViewHere != undefined)
                {
                     console.log('Step1');
                    if(BillingAddress != undefined)
                    {
                        console.log('Step2');
                        var newBillingAddress = new Array();
                        for(var i= 0 ; i < BillingAddress.length ; i++)
                        {
                           console.log('Step3');
                                                                                              
                            if(cartCheckoutViewHere.model.attributes.selectedPaymentMethod!=undefined && cartCheckoutViewHere.model.attributes.selectedPaymentMethod == 'po')
                            {
                                if(poType == "Bolt")
                                {
                                    //changes done for BOLT Address issues
                                    if(BillingAddress[i].boltSite && BillingAddress[i].boltActive)
                                    {
                                      console.log('Step4');
                                        newBillingAddress.push(BillingAddress[i]);
                                    }
                                }
                                else if(poType == "OneBMS")
                                {
                                    if(BillingAddress[i].BMSSite)
                                    {
                                      console.log('Step4');
                                      newBillingAddress.push(BillingAddress[i]);
                                    }
                                }
                            }
                            else
                            {
                                console.log('Step5');
                                newBillingAddress.push(BillingAddress[i]);
                            }
                        }
                        
                        console.log(cartCheckoutViewHere.model.attributes);
                        cartCheckoutViewHere.model.attributes.billingAddress.addressList = newBillingAddress;
                        cartCheckoutViewHere.model.attributes.billingAddress.classPrefix='billing';
                        cartCheckoutViewHere.model.attributes.billingAddress.sectionLabel = 'CheckOut_BillingAddress';
                        
                                                                              
                    }//end of billing address if loop
                    
                    
                    if(masterShippingAddress != undefined)
                    {
                        console.log('Step6');
                        var newShippingAddress = new Array();
                        console.log(masterShippingAddress);
                        for(var i= 0 ; i < masterShippingAddress.length ; i++)
                        {
                           console.log('Step7');
                            /*                                                                  
                            if(cartCheckoutViewHere.model.attributes.selectedPaymentMethod!=undefined && cartCheckoutViewHere.model.attributes.selectedPaymentMethod == 'po')
                            {
                                if(poType == "Bolt")
                                {
                                    if(masterShippingAddress[i].boltSite && masterShippingAddress[i].siteUseStatus)
                                    {
                                      console.log('Step8');
                                        newShippingAddress.push(masterShippingAddress[i]);
                                    }
                                }
                                else if(poType == "OneBMS")
                                {
                                    if(masterShippingAddress[i].BMSSite)
                                    {
                                        console.log('Step8');
                                        newShippingAddress.push(masterShippingAddress[i]);
                                    }
                                }
                            }
                            else
                            {*/
                                console.log('Step9');
                                newShippingAddress.push(masterShippingAddress[i]);
                            //}
                        }
                        
                        console.log(cartCheckoutViewHere.model.attributes);
                        cartCheckoutViewHere.model.attributes.shippingAddress.addressList = newShippingAddress;
                        cartCheckoutViewHere.model.attributes.shippingAddress.classPrefix='shipping';
                        cartCheckoutViewHere.model.attributes.shippingAddress.sectionLabel = 'CheckOut_ShippingAddress';
                                                                              
                    } //end of shipping address if loop
                    
                    
                    //common logic to both
                    if(addressView!=undefined){
                        
                            console.log('Render Address List View');
                            //addressview needs to be rendered to display  the latest addreses in model
                            addressView.render();
                            //rendering the page removes the checked option...hence check the user selected value back
                            if(cartCheckoutViewHere.model.attributes.selectedPaymentMethod){
                                if(cartCheckoutViewHere.model.attributes.selectedPaymentMethod=='po')
                                {
                                        $('.cmi-po').prop("checked", true);
                                        
                                }
                                else 
                                {
                                        $('.cmi-cc').prop("checked", true);
                                }
                             }
                             
                                
                                $('#paymentParentDiv').css('display', 'block');
                                
                            
                                if(eventname=='changeselection')
                                {
                                    //billing fields
                                    $('[name="billingAddress.firstName"]').val('');
                                    $('[name="billingAddress.lastName"]').val('');
                                    $('[name="billingAddress.country"]').val('');
                                    $('[name="billingAddress.companyName"]').val('');
                                    $('.billingstate').val('');
                                
                                    $('[name="billingAddress.address1"]').val('');  
                                    $('[name="billingAddress.address2"]').val('');  
                                    $('[name="billingAddress.address3"]').val('');  
                                    $('[name="billingAddress.city"]').val('');  
                                    $('[name="billingAddress.postalCode"]').val('');
                                    
                                    //shipping fields
                                     $('[name="shippingAddress.firstName"]').val('');
                                    $('[name="shippingAddress.lastName"]').val('');
                                    $('[name="shippingAddress.country"]').val('');
                                    $('[name="shippingAddress.companyName"]').val('');
                                    $('.shippingstate').val('');
                                
                                    $('[name="shippingAddress.address1"]').val('');  
                                    $('[name="shippingAddress.address2"]').val('');  
                                    $('[name="shippingAddress.address3"]').val('');  
                                    $('[name="shippingAddress.city"]').val('');  
                                    $('[name="shippingAddress.postalCode"]').val('');
                                    
                                    
                                }
                                
                                    addressView.processReadOnlyLogic();
                                    populatedistributorcode();

                                    if(cartCheckoutViewHere.model.attributes.selectedPaymentMethod=='cc'){
                                        addressView.renderBillStates('',CCRZ.cartCheckoutModel.attributes.billingAddress.BillingCountryCode);
                                        $(".billingAddress1").val(CCRZ.cartCheckoutModel.attributes.billingAddress.address1);
                                        if(CCRZ.cartCheckoutModel.attributes.billingAddress.address2!=undefined) {
                                             $(".billingAddress2").val(CCRZ.cartCheckoutModel.attributes.billingAddress.address2);
                                        }
                                        else {
                                            $(".billingAddress2").val('');
                                        }
                                        if(CCRZ.cartCheckoutModel.attributes.billingAddress.address3!=undefined) {
                                             $(".billingAddress3").val(CCRZ.cartCheckoutModel.attributes.billingAddress.address3);
                                        }
                                        else {
                                             $(".billingAddress3").val('');
                                        }
                                        $(".billingCity").val(CCRZ.cartCheckoutModel.attributes.billingAddress.city);
                                        $(".billingcountry").val(CCRZ.cartCheckoutModel.attributes.billingAddress.BillingCountryCode);
                                        $(".billingPostalCode").val(CCRZ.cartCheckoutModel.attributes.billingAddress.postalCode);
                                        $('.billingstate').val(CCRZ.cartCheckoutModel.attributes.billingAddress.BillingStateCode);
                                        CCRZ.cartCheckoutView.model.attributes.selectedPaymentMethod = 'cc';
                                        isUpdateCartPayRequired = true;                                        
                                    }
                            }
                            
                                // debugger;
                                
                    
                                                 
                }  
               
            }                    
                                  
           
            
            
            CCRZ.subsc = _.extend(CCRZ.subsc||{});
                 
            
         
            CCRZ.subsc.UserAccountDataAction = _.extend(
            {
                className : 'OSM_SW_UserInformationComp_Ctrl',
                getPaymentType : function(callback)
                {
                    //this.invokeContainerLoadingCtx($('body'),'getPaymentType', function(response)
                    this.invokeCtx('getPaymentType', function(response)
                    {
                        console.log("==== in method to fetch Payment Type from backend");
                        
                         callback(response);
                    },
                    {
                        buffer : false, // this call will be executed by itself
                        nmsp   : false  // defines that this is a call to a subscriber class
                    }); 
                },
                getBMSSearchinfo : function(searchText,distributorcode,callback)
                {
                    this.invokeContainerLoadingCtx($('body'),'getInfoFromBMS',searchText,distributorcode,function(response)
                    {
                        callback(response);
                        console.log("====Got the response from Controller for getInfoFromBMS====");
                    },
                    {
                        buffer : false, // this call will be executed by itself
                        nmsp   : false  // defines that this is a call to a subscriber class
                    }); 
                },
                getCleasePaymentMethod : function(callback)
                {
                    this.invokeContainerLoadingCtx($('body'),'getCleasePaymentMethod', function(response)
                    {
                        callback(response);
                        console.log("====Got the response from Controller for getCleasePaymentMethod====");
                    },
                    {
                        buffer : false, // this call will be executed by itself
                        nmsp   : false  // defines that this is a call to a subscriber class
                    }); 
                },
                updatePaymentMethod : function(paymentMethod,thirdPatyPayment,bmsNumber,bmsCustomerName,IAMCustomerCode)
                {
                    //this.invokeCtx('updatePaymentMethod',paymentMethod, thirdPatyPayment,bmsNumber,bmsCustomerName,IAMCustomerCode, function(response)
                    this.invokeContainerLoadingCtx($('body'),'updatePaymentMethod',paymentMethod, thirdPatyPayment,bmsNumber,bmsCustomerName,IAMCustomerCode, function(response)
                    {
                        
                         console.log("====Got the response from Controller for UpdatePayment====");
                         if(response!=undefined)
                         {
                             if(!response.success && response.data.ThirdPartyMsg=='true')
                             {
                                 cartCheckoutViewHere.model.attributes.ThirdPartyMsg='true';
                                 $("#ThirdPartyMsg").css("display", "block");
                             }
                             if(response.success)
                             {
                                 cartCheckoutViewHere.model.attributes.IAMAccountId = response.data.IAMAccountId; 
                             }
                         }
                        
                    },
                    {
                        buffer : false, // this call will be executed by itself
                        nmsp   : false  // defines that this is a call to a subscriber class
                    }); 
                },
                updateEDQAddress : function(address1,address2,address3,city,state,country,postalCode,shippingAddress1,shippingAddress2,shippingAddress3,shippingCity,shipStateCode,shippingCountryCode,shippingPostalCode,callback)
                {
                    var myobject=new Object();
                    myobject.address1=address1;
                    myobject.address2=address2;
                    myobject.address3=address3;
                    myobject.city=city;
                    myobject.state=state;
                    myobject.country=country;
                    myobject.postalCode=postalCode;
                    myobject.shippingAddress1=shippingAddress1;
                    myobject.shippingAddress2=shippingAddress2;
                    myobject.shippingAddress3=shippingAddress3;
                    myobject.shippingCity=shippingCity;
                    myobject.shipStateCode=shipStateCode;
                    myobject.shippingCountryCode=shippingCountryCode;
                    myobject.shippingPostalCode=shippingPostalCode;
                    var myString = JSON.stringify(myobject);
                    
                    var contctDetails = new Object();                   
                    var firstName = $('#firstNameField').val();
                    var lastName = $('#lastNameField').val();
                    var phone = $('#homePhoneField').val();
                    var email = $('#emailField').val();
                    var secondaryEmail = $('#secEmailField').val();
                    contctDetails.firstName = firstName;
                    contctDetails.lastName = lastName;
                    contctDetails.phone = phone;
                    contctDetails.email = email;
                    contctDetails.secondaryEmail = secondaryEmail;
                    var myString2 = JSON.stringify(contctDetails);
                    console.log('mystring>>>'+myString);
                    //this.invokeCtx('updateEDQAddress',myString,myString2,function(response)
                    this.invokeContainerLoadingCtx($('body'),'updateEDQAddress',myString,myString2,function(response)
                    {
                        
                        
                         callback(response);
                    },
                    {
                        buffer : false, // this call will be executed by itself
                        nmsp   : false  // defines that this is a call to a subscriber class
                    }); 
                },
                
                updateEDQAddressPO : function(shippingAddress1,shippingAddress2,shippingAddress3,shippingCity,shipStateCode,shippingCountryCode,shippingPostalCode,callback)
                {
                    var myobject=new Object();
                    myobject.shippingAddress1=shippingAddress1;
                    myobject.shippingAddress2=shippingAddress2;
                    myobject.shippingAddress3=shippingAddress3;
                    myobject.shippingCity=shippingCity;
                    myobject.shipStateCode=shipStateCode;
                    myobject.shippingCountryCode=shippingCountryCode;
                    myobject.shippingPostalCode=shippingPostalCode;
                    var myString = JSON.stringify(myobject);
                    console.log('mystring>>>'+myString);
                    
                    var contctDetails = new Object();                   
                    var firstName = $('#firstNameField').val();
                    var lastName = $('#lastNameField').val();
                    var phone = $('#homePhoneField').val();
                    var email = $('#emailField').val();
                    var secondaryEmail = $('#secEmailField').val();
                    contctDetails.firstName = firstName;
                    contctDetails.lastName = lastName;
                    contctDetails.phone = phone;
                    contctDetails.email = email;
                    contctDetails.secondaryEmail = secondaryEmail;
                    var myString2 = JSON.stringify(contctDetails);
                    
                    //this.invokeCtx('updateEDQAddressPO',myString,myString2,function(response)
                    this.invokeContainerLoadingCtx($('body'),'updateEDQAddressPO',myString,myString2,function(response)
                    {
                        console.log("get responce from edq po");
                        console.log(response);
                         callback(response);
                    },
                    {
                        buffer : false, // this call will be executed by itself
                        nmsp   : false  // defines that this is a call to a subscriber class
                    }); 
                }
                
                
              
            },
            
            CCRZ.RemoteInvocation);
            
        });
        
      </script>
    </apex:component>